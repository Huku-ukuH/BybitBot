package org.example.deal;

import lombok.Getter;
import org.example.bybit.BybitManager;
import org.example.bybit.service.BybitPositionTrackerService;
import org.example.model.Direction;
import org.example.monitor.dto.PositionInfo;
import org.example.strategy.strategies.strategies.StrategyFactory;
import org.example.util.JsonUtils;
import org.example.util.LoggerUtils;

import java.io.IOException;
import java.util.*;


/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–µ–ª–æ–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –±–∏—Ä–∂–µ Bybit.
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç orderId –æ—Ä–¥–µ—Ä–æ–≤ (TP/SL),
 * –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π.
 * <p>
 * –ù–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–ø—Ä—è–º—É—é ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 */
public class UpdateManager {
    @Getter
    private boolean createDealsProcess = false;

    private List<PositionInfo> pendingNewPositions = new ArrayList<>();
    private int currentRestoreIndex = 0;
    private final BybitManager bybitManager;
    private  final  DealCalculator dealCalculator;

    public UpdateManager(BybitManager bybitManager, DealCalculator dealCalculator) {
        this.bybitManager = bybitManager;
        this.dealCalculator = dealCalculator;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫.
     */
    public String updateDeals(ActiveDealStore activeDealStore, long chatId, String strategyNameInput) throws IOException {
        // –®–ê–ì 1: –ï—Å–ª–∏ –∏–¥—ë—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if (createDealsProcess) {
            return createNextDeal(strategyNameInput, activeDealStore, chatId, bybitManager);
        }

        StringBuilder result = new StringBuilder("üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n");
        List<PositionInfo> exchangePositions = bybitManager.getBybitPositionTrackerService().getPositionList();

        if (exchangePositions.isEmpty()) {
            result.append("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Bybit.");
            return result.toString();
        }

        // –®–ê–ì 2: –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–¥–µ–ª–∫–∏
        List<PositionInfo> newPositions = new ArrayList<>(exchangePositions); // –∫–æ–ø–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        for (Deal deal : activeDealStore.getAllDeals()) {
            PositionInfo posOnExchange = findPosition(exchangePositions, deal.getSymbol().toString());

            if (posOnExchange == null) {
                // –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
                result.append("üóëÔ∏è ").append(deal.getSymbol()).append(" ‚Äî –∑–∞–∫—Ä—ã—Ç–∞, —É–¥–∞–ª–µ–Ω–∞.\n");
                activeDealStore.removeDeal(deal.getId());
            } else {
                deal.updateDealFromBybitPosition(posOnExchange);
                result.append(restoreOrderIds(deal, posOnExchange.getSymbol().toString(), bybitManager));
                result.append("‚úÖ ").append(deal.getSymbol()).append(" ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n");
                newPositions.remove(posOnExchange); // —É–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ "–Ω–æ–≤—ã—Ö"
            }
        }

        // –®–ê–ì 3: –ï—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏?
        if (!newPositions.isEmpty()) {
            this.pendingNewPositions = new ArrayList<>(newPositions);
            this.currentRestoreIndex = 0;
            this.createDealsProcess = true;

            PositionInfo first = pendingNewPositions.get(0);
            result.append("\nüÜï –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ").append(first.getSymbol())
                    .append(". –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:");
        } else {
            result.append("\n‚úÖ –í—Å–µ —Å–¥–µ–ª–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.");
        }

        return result.toString();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–¥–Ω—É —Å–¥–µ–ª–∫—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
     */
    private String createNextDeal(String strategyName, ActiveDealStore activeDealStore, long chatId, BybitManager bybitManager) {
        if (currentRestoreIndex >= pendingNewPositions.size()) {
            createDealsProcess = false;
            return "‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.";
        }

        PositionInfo pos = pendingNewPositions.get(currentRestoreIndex);
        currentRestoreIndex++;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        if (!StrategyFactory.isStrategyAvailable(strategyName)) {
            currentRestoreIndex--; // –≤–µ—Ä–Ω—ë–º –∏–Ω–¥–µ–∫—Å –Ω–∞–∑–∞–¥
            return "‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è '" + strategyName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: " +
                    String.join(", ", StrategyFactory.getAvailableStrategies());
        }

        try {
            Deal restoredDeal = StrategyFactory.getStrategy(strategyName).createDeal(pos, chatId, strategyName);
            restoredDeal.setId(pos.getSymbol() + "_" + strategyName + "_" + System.currentTimeMillis());
            restoreOrderIds(restoredDeal, pos.getSymbol().toString(), bybitManager);


            //–µ—Å–ª–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –∑–Ω–∞—á–∏—Ç –∏—Ö –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å!
            if (restoredDeal.getTakeProfits().isEmpty()) {
                restoredDeal.getStrategy().setTP(restoredDeal, bybitManager);
            }
            if (restoredDeal.getStopLoss() == null || restoredDeal.getStopLoss() == 0) {
                restoredDeal.setStopLoss(dealCalculator.getStopLossForUpdatePosition(restoredDeal, restoredDeal.getStrategy().getConfig()));
                restoredDeal.getStrategy().setSL(restoredDeal, bybitManager);
                restoreOrderIds(restoredDeal, pos.getSymbol().toString(), bybitManager);
            }

            activeDealStore.addDeal(restoredDeal);

            StringBuilder result = new StringBuilder();
            result.append("‚úÖ –°–¥–µ–ª–∫–∞ –¥–ª—è ").append(pos.getSymbol()).append(" –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π '").append(strategyName).append("'.\n");

            if (currentRestoreIndex < pendingNewPositions.size()) {
                PositionInfo next = pendingNewPositions.get(currentRestoreIndex);
                result.append("\nüÜï –°–ª–µ–¥—É—é—â–∞—è: ").append(next.getSymbol()).append(". –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:");
            } else {
                createDealsProcess = false;
                result.append("\n‚úÖ –í—Å–µ —Å–¥–µ–ª–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
            }

            LoggerUtils.info("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞: id=" + restoredDeal.bigDealToString() + ", TP orderId=" + restoredDeal.getTpOrderId() + ", SL orderId=" + restoredDeal.getSlOrderId());

            return result.toString();

        } catch (Exception e) {
            LoggerUtils.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ –¥–ª—è " + pos.getSymbol(), e);
            return "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage();
        }
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ---
    private PositionInfo findPosition(List<PositionInfo> positions, String symbol) {
        return positions.stream()
                .filter(p -> p.getSymbol().toString().equals(symbol))
                .findFirst()
                .orElse(null);
    }

    private String restoreOrderIds(Deal deal, String symbol, BybitManager bybitManager) {
        StringBuilder result = new StringBuilder();
        try {
            List<BybitPositionTrackerService.OrderInfo> orders = bybitManager.getBybitPositionTrackerService().getOrders(symbol);
            if (orders == null || orders.isEmpty()) {
                return "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ " + symbol;
            }

            LoggerUtils.info("üì• –û–†–î–ï–†–ê " + symbol + ": " + JsonUtils.toJson(orders));

            for (BybitPositionTrackerService.OrderInfo order : orders) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ reduceOnly
                if (!Boolean.TRUE.equals(order.getReduceOnly())) {
                    continue;
                }

                if (–µ—Å–ª–∏ –æ—Ä–¥–µ—Ä —É–∂–µ —É—Å—Ç—å —É —Å–¥–µ–ª–∫–∏, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω)

                // === 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ stop-–æ—Ä–¥–µ—Ä–æ–≤ (SL –∏ trailing-stop) ===
                if ("Stop".equals(order.getStopOrderType())) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ triggerPrice
                    if (order.getTriggerPrice() == null || order.getTriggerPrice().isEmpty()) {
                        continue;
                    }

                    double triggerPrice;
                    try {
                        triggerPrice = Double.parseDouble(order.getTriggerPrice());
                    } catch (NumberFormatException e) {
                        result.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å triggerPrice —É stop-–æ—Ä–¥–µ—Ä–∞ ").append(order.getOrderId()).append("\n");
                        continue;
                    }

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º: SL –∏–ª–∏ TP?
                    boolean isStopLoss;
                    if (deal.getDirection() == Direction.LONG) {
                        isStopLoss = triggerPrice < deal.getEntryPrice().doubleValue();
                    } else { // SHORT
                        isStopLoss = triggerPrice > deal.getEntryPrice().doubleValue();
                    }

                    if (isStopLoss) {
                        deal.addOrderId(new OrderManager(order.getOrderId(), OrderManager.OrderType.SL, triggerPrice));
                        deal.setStopLoss(triggerPrice); // üî• –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢!
                        result.append("üîó –ü—Ä–∏–≤—è–∑–∞–Ω SL: ").append(order.getOrderId()).append(" -> ").append(triggerPrice).append("\n");
                    } else {
                        deal.addOrderId(new OrderManager(order.getOrderId(), OrderManager.OrderType.TP, triggerPrice));
                        result.append("üîó –ü—Ä–∏–≤—è–∑–∞–Ω TP (stop): ").append(order.getOrderId()).append(" -> ").append(triggerPrice).append("\n");
                    }
                }

                // === 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –ª–∏–º–∏—Ç–Ω—ã—Ö TP-–æ—Ä–¥–µ—Ä–æ–≤ (–±–µ–∑ triggerPrice) ===
                else if ((order.getTriggerPrice() == null || order.getTriggerPrice().isEmpty())
                        && order.getPrice() != null && !order.getPrice().isEmpty()) {

                    // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å TP ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–æ—Ä–æ–Ω—É
                    boolean isTpOrder = false;
                    if (deal.getDirection() == Direction.LONG && "Sell".equals(order.getSide())) {
                        isTpOrder = true;
                    } else if (deal.getDirection() == Direction.SHORT && "Buy".equals(order.getSide())) {
                        isTpOrder = true;
                    }

                    if (isTpOrder) {
                        try {
                            double price = Double.parseDouble(order.getPrice());
                            deal.addOrderId(new OrderManager(order.getOrderId(), OrderManager.OrderType.TP, price));
                            result.append("üîó –ü—Ä–∏–≤—è–∑–∞–Ω TP (–ª–∏–º–∏—Ç): ").append(order.getOrderId()).append(" -> ").append(price).append("\n");
                        } catch (NumberFormatException e) {
                            result.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É TP —É –æ—Ä–¥–µ—Ä–∞ ").append(order.getOrderId()).append("\n");
                        }
                    }
                }
            }

        } catch (IOException e) {
            LoggerUtils.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ä–¥–µ—Ä–∞ —Å Bybit –¥–ª—è —Å–∏–º–≤–æ–ª–∞ " + symbol, e);
        }
        return result.toString();
    }

    public PositionInfo updateOneDeal(String symbol) {
        return bybitManager.getBybitPositionTrackerService().getPositionBySymbol(symbol);
    }

}
