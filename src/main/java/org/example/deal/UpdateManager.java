package org.example.deal;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.example.bybit.BybitManager;
import org.example.bybit.service.BybitPositionTrackerService;
import org.example.model.EntryType;
import org.example.monitor.dto.PositionInfo;
import org.example.strategy.strategies.strategies.StrategyFactory;
import org.example.util.EmojiUtils;
import org.example.util.LoggerUtils;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–¥–µ–ª–æ–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ –±–∏—Ä–∂–µ Bybit.
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç orderId –æ—Ä–¥–µ—Ä–æ–≤ (TP/SL),
 * –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π.
 * <p>
 * –ù–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–ø—Ä—è–º—É—é ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 */


public class UpdateManager {
    @Getter
    private boolean createDealsProcess = false;
    private List<PositionInfo> positionListBufer;

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏ –≤ –ø–∞–º—è—Ç–∏ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞ Bybit.
     *
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: —Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, —Å–æ–∑–¥–∞–Ω–æ, —É–¥–∞–ª–µ–Ω–æ
     */

    public String updateDeals(BybitManager bybitManager, ActiveDealStore activeDealStore, long chatId, String strategyName) throws IOException {

        if (createDealsProcess) {
            createDeal(new StringBuilder(), activeDealStore, chatId, strategyName);
        }

        StringBuilder stringBuilder = new StringBuilder("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n");
        positionListBufer = bybitManager.getBybitPositionTrackerService().getPositionList();


        if (positionListBufer.isEmpty()) {
            stringBuilder.append("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Bybit");
            return stringBuilder.toString();
        }

        try {
            //–ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –≤ –±–∞–π–±–∏—Ç–µ

            if (positionListBufer.size() != activeDealStore.size()) {

                for (Deal deal : activeDealStore.getAllDeals()) {
                    PositionInfo pos = bybitManager.getBybitPositionTrackerService().getPosition(positionListBufer, deal.getSymbol().getSymbol());
                    //–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                    stringBuilder.append(updateDeal(deal, pos, activeDealStore)).append("\n");
                    //—É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ —Å–ø–∏—Å–∫–∞
                    positionListBufer.remove(pos);
                }

                createDealsProcess = true;
                //—Å–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–¥–µ–ª–∫–∏
                stringBuilder.append("\n").append("–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n");
                return setStrategyNameToNewDeal(stringBuilder);
            }

            //–ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Å–ø–∏—Å–∫—É
            for (Deal deal : activeDealStore.getAllDeals()) {
                PositionInfo pos = bybitManager.getBybitPositionTrackerService().getPosition(positionListBufer, deal.getSymbol().getSymbol());
                stringBuilder.append(updateDeal(deal, pos, activeDealStore));
            }

        }catch (Exception e) {
            LoggerUtils.logError("–ù–∞–¥–æ –∂–µ, –æ—à–∏–±–∫–∞", e);
        }

        return stringBuilder.toString();
    }

    private String updateDeal(Deal deal, PositionInfo positionInfo, ActiveDealStore activeDealStore) {
        String updateResultString = null;
        try {

            if (positionInfo != null) {
                deal.updateDealFromBybitPosition(positionInfo);
                updateResultString = deal.getSymbol().toString() + "- –°–¥–µ–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!";
                return updateResultString;
            }

            // –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤—Ä—É—á–Ω—É—é
            updateResultString = "üóëÔ∏è –ü–æ–∑–∏—Ü–∏—è " + deal.getSymbol() + " –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ (–∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –±–∏—Ä–∂–µ ).";
            activeDealStore.removeDeal(deal.getId());

        } catch (Exception e) {
            LoggerUtils.logError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è " + deal.getSymbol(), e);
        }
        return updateResultString;
    }

    private String setStrategyNameToNewDeal(StringBuilder stringBuilder){
        stringBuilder.append(EmojiUtils.DEBUG + " –£—Å—Ç–∞–Ω–æ–≤–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏ ").append(positionListBufer.get(0).getSymbol().toString());
        return stringBuilder.toString();
    }

    private String createDeal(StringBuilder stringBuilder, ActiveDealStore activeDealStore, long chatId, String strategyName) {

        for (PositionInfo positionInfo : positionListBufer) {
            Deal deal = StrategyFactory.getStrategy("ai").createDeal(positionInfo, chatId, strategyName);

            //—Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id —Å–¥–µ–ª–∫–∏ —É–∂–µ –ø–æ—è–≤–∏–ª—Å—è –≤ BybitPositionTrackerService ( public static class OrderInfo {)

            deal.setId("–ó–î–ï–°–¨ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ ID –°–î–ï–õ–ö–ò");
            activeDealStore.addDeal(deal);
            stringBuilder.append(deal).append("\n");
        }
        LoggerUtils.logInfo(stringBuilder.toString());

        if(positionListBufer.isEmpty()) {  //—Ç—É—Ç –≤–∞–∂–Ω–æ –≤ BotCommandHandler –ø–æ–ª—É—á–∞—Ç—å createDealsProcess —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
            createDealsProcess = false;
            return stringBuilder.toString();
        }

        return stringBuilder.toString();
    }






    // –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏—Ç—å, –Ω—É–∂–µ–Ω –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

/*
    public SyncResult syncWithExchange() {
        try {
            List<PositionInfo> exchangePositions = positionTrackerService.getPositionList();
            LoggerUtils.logInfo("üîÑ –ù–∞–π–¥–µ–Ω–æ " + exchangePositions.size() + " –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Bybit");


            SyncResult result = new SyncResult();
            // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–¥–µ–ª–∫–∏
            for (Deal deal : activeDealStore.getAllDeals()) {
                PositionInfo positionOnExchange = findPosition(exchangePositions, deal.getSymbol().toString());
                if (positionOnExchange == null) {
                    handleClosedPosition(deal, result);
                } else {
                    updateExistingDeal(deal, positionOnExchange, result);
                    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏
                    exchangePositions.remove(positionOnExchange);
                }
            }

            // 2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–∑–∏—Ü–∏–π
            createNewDealsFromPositions(exchangePositions, result);

            return result;
        } catch (Exception e) {
            LoggerUtils.logError("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–æ–∫ —Å –±–∏—Ä–∂–µ–π", e);
            return SyncResult.failed(e);
        }
    }

    private PositionInfo findPosition(List<PositionInfo> positions, String symbol) {
        return positions.stream()
                .filter(p -> symbol.equals(p.getSymbol()))
                .findFirst()
                .orElse(null);
    }

    private void handleClosedPosition(Deal deal, SyncResult result) {
        LoggerUtils.logInfo("üóëÔ∏è –ü–æ–∑–∏—Ü–∏—è " + deal.getSymbol() + " –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ –±–∏—Ä–∂–µ");
        activeDealStore.removeDeal(deal.getId());
        result.removed++;
    }

    private void updateExistingDeal(Deal deal, PositionInfo position, SyncResult result) {
        try {
            deal.updateDealFromBybitPosition(position);
            restoreOrderIds(deal, position.getSymbol());
            LoggerUtils.logDebug("‚úÖ –°–¥–µ–ª–∫–∞ " + deal.getId() + " –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö Bybit");
            result.updated++;
        } catch (Exception e) {
            LoggerUtils.logError("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ " + deal.getId(), e);
            result.errors.add("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ " + deal.getId() + ": " + e.getMessage());
        }
    }

    private void createNewDealsFromPositions(List<PositionInfo> newPositions, SyncResult result) {
        for (PositionInfo pos : newPositions) {
            Deal restoredDeal = restoreDealFromPosition(pos);
            if (restoredDeal != null) {
                activeDealStore.addDeal(restoredDeal);
                result.created++;
                LoggerUtils.logInfo("üÜï –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞: " + restoredDeal.getId());
            }
        }
    }

    private Deal restoreDealFromPosition(PositionInfo pos) {
        try {
            var strategy = StrategyFactory.getStrategy("ai"); // –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            Deal deal = new Deal(pos.getSymbol(), pos.getSide(), EntryType.MARKET, pos.getAvgPrice(),
                    pos.getStopLoss(), new ArrayList<>());

            deal.setId(generateDealIdFromSymbol(pos.getSymbol()));
            deal.setStrategyName("ai");
            deal.updateDealFromBybitPosition(pos);
            restoreOrderIds(deal, pos.getSymbol());

            LoggerUtils.logInfo("üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: " + deal);
            return deal;

        } catch (Exception e) {
            LoggerUtils.logError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–¥–µ–ª–∫—É –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: " + pos.getSymbol(), e);
            return null;
        }
    }

    private void restoreOrderIds(Deal deal, String symbol) {
        try {
            List<BybitPositionTrackerService.OrderInfo> orders = positionTrackerService.getOrders(symbol);
            for (BybitPositionTrackerService.OrderInfo order : orders) {
                if ("TakeProfit".equals(order.getOrderType()) && order.isReduceOnly()) {
                    OrderManager tpOrder = new OrderManager(order.getOrderId(), OrderManager.OrderType.TP, Double.parseDouble(order.getPrice()));
                    deal.addOrderId(tpOrder);
                }
                if ("StopLoss".equals(order.getOrderType()) && order.isReduceOnly()) {
                    OrderManager slOrder = new OrderManager(order.getOrderId(), OrderManager.OrderType.SL, Double.parseDouble(order.getPrice()));
                    deal.addOrderId(slOrder);
                }
            }
        } catch (IOException e) {
            LoggerUtils.logWarn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ " + symbol);
        }
    }

    private String generateDealIdFromSymbol(String symbol) {
        return symbol + "_" + System.currentTimeMillis();
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã ---
    public static class SyncResult {
        public int updated = 0;
        public int created = 0;
        public int removed = 0;
        public List<String> errors = new ArrayList<>();

        public boolean isSuccess() {
            return errors.isEmpty();
        }

        public static SyncResult failed(Exception e) {
            SyncResult result = new SyncResult();
            result.errors.add(e.getMessage());
            return result;
        }

        @Override
        public String toString() {
            return "SyncResult{" +
                    "updated=" + updated +
                    ", created=" + created +
                    ", removed=" + removed +
                    ", errors=" + errors +
                    '}';
        }
    }*/
}