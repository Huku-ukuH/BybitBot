package org.example.deal;

import lombok.Getter;
import lombok.Setter;
import org.example.model.Symbol;
import org.example.model.Direction;
import org.example.model.EntryType;
import org.example.deal.dto.DealRequest;
import org.example.monitor.dto.PositionInfo;
import org.example.strategy.params.ExitPlan;
import org.example.strategy.strategies.StrategyFactory;
import org.example.strategy.strategies.TradingStrategy;
import org.example.util.LoggerUtils;
import org.example.util.MathUtils;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

@Getter
@Setter
public class Deal {
    // === –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å–¥–µ–ª–∫–∏ ===
    private String id;  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–¥–µ–ª–∫–∏
    private String note;
    private long chatId;
    private Symbol symbol;
    private Double stopLoss;
    private ExitPlan exitPlan;
    private Double entryPrice;
    private Direction direction;
    private double positionSize;
    private double leverageUsed;
    private EntryType entryType;
    private Double potentialLoss;
    private double requiredCapital;
    private List<Double> takeProfits;
    private PositionInfo positionInfo;
    private List <OrderManager> ordersIdList;
    private List<String> executedTpOrderIds = new ArrayList<>(); // –î–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)


    private String strategyName = "ai";
    private transient TradingStrategy strategy;

    private boolean active = true;
    private boolean positivePnL = false;
    private List<ExitStep> executedExits = new ArrayList<>();
    private Map<Double, Integer> tpToPercentage = new HashMap<>();

    public Deal(Symbol symbol, Direction direction, EntryType entryType, Double entryPrice,
                Double stopLoss, List<Double> takeProfits) {
        this.id = "default";
        this.symbol = symbol;
        this.direction = direction;
        this.entryType = entryType;
        this.entryPrice = entryPrice;
        this.stopLoss = stopLoss;
        this.takeProfits = new ArrayList<>(takeProfits != null ? takeProfits : Collections.emptyList());
        this.positionSize = 0.0;
        this.leverageUsed = 1;
        this.requiredCapital = 0.0;
        this.ordersIdList = new ArrayList<>();
    }

    public Deal(DealRequest request) {
        this(
                request.getSymbol(),
                request.getDirection(),
                request.getEntryType(),
                request.getEntryPrice(),
                request.getStopLoss(),
                request.getTakeProfits()
        );
    }

    public void setStrategyName(String strategyName) {
        if (strategyName == null || strategyName.isEmpty()) {
            LoggerUtils.logWarn("–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ –∏–ª–∏ null –∏–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏ " + this.id + ". –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.");
            return;
        }
        this.strategyName = strategyName.toLowerCase();
        this.strategy = null;
        LoggerUtils.logDebug("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Å–¥–µ–ª–∫–∏ " + this.id + " —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: " + this.strategyName);
    }
    //–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —ç—Ç–æ–π —Å–¥–µ–ª–∫–æ–π.
    public TradingStrategy getStrategy() {
        if (strategy == null && strategyName != null && !strategyName.isEmpty()) {
            try {
                this.strategy = StrategyFactory.getStrategy(this.strategyName);

            } catch (Exception e) { // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º –≤ —Ñ–∞–±—Ä–∏–∫–µ
                LoggerUtils.logError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é '" + strategyName + "' –¥–ª—è —Å–¥–µ–ª–∫–∏ " + this.id + ". –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞ –∫ 'ai'.", e);

                // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞ –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (!"ai".equals(this.strategyName)) { // –ò–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
                    try {
                        this.strategyName = "ai";
                        this.strategy = StrategyFactory.getStrategy(this.strategyName);
                        LoggerUtils.logWarn("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Å–¥–µ–ª–∫–∏ " + this.id + " –æ—Ç–∫–∞—á–µ–Ω–∞ –∫ 'ai'.");
                    } catch (Exception fallbackException) {
                        LoggerUtils.logError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–∂–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é 'ai' –¥–ª—è —Å–¥–µ–ª–∫–∏ " + this.id, fallbackException);
                        throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Å–¥–µ–ª–∫–∏ " + this.id, fallbackException);
                    }
                } else {
                    LoggerUtils.logError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é 'ai' –¥–ª—è —Å–¥–µ–ª–∫–∏ " + this.id, e);
                    throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é 'ai' –¥–ª—è —Å–¥–µ–ª–∫–∏ " + this.id, e);
                }
            }
        }
        return strategy;
    }

    public List<Double> getTakeProfits() {
        return Collections.unmodifiableList(takeProfits);
    }

    public void addTakeProfit(double tp) {
        if (!takeProfits.contains(tp)) {
            takeProfits.add(tp);
        }
    }


    public void updateFromPosition(PositionInfo positionInfo){
        if (positionInfo == null || !this.symbol.getSymbol().equals(positionInfo.getSymbol())) {
            return;
        }
        this.positionInfo = positionInfo;
        leverageUsed = positionInfo.getLeverage();
        positionSize = positionInfo.getSize();
        potentialLoss = positionInfo.getPotentialLoss();
    }
    // === –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–æ–π ===



    /**
     * –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤—ã—Ö–æ–¥ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ TP.
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –ø–æ–º–µ—á–∞–µ—Ç —Å–¥–µ–ª–∫—É –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é.
     *
     * @param exitPrice –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞.
     * @param exitAmount –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—à–µ–¥—à–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤/–º–æ–Ω–µ—Ç.
     */
    public void recordExit(double exitPrice, double exitAmount) {
        if (!active) {
            LoggerUtils.logWarn("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏ " + this.id);
            return;
        }
        if (!takeProfits.contains(exitPrice)) {
            LoggerUtils.logWarn("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥ –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É TP (" + exitPrice + ") –¥–ª—è —Å–¥–µ–ª–∫–∏ " + this.id);
            return;
        }

        ExitStep exit = new ExitStep(exitPrice, exitAmount);
        executedExits.add(exit);
        LoggerUtils.logDebug("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤—ã—Ö–æ–¥: —Ü–µ–Ω–∞=" + exitPrice + ", –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ=" + exitAmount + " –¥–ª—è —Å–¥–µ–ª–∫–∏ " + this.id);

        // –ï—Å–ª–∏ –≤—Å–µ TP –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚Äî —Å–¥–µ–ª–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º >= –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—ã—Ö–æ–¥–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º TP (–Ω–∞–ø—Ä–∏–º–µ—Ä, Market order –∑–∞–∫—Ä—ã–ª –≤—Å—ë)
        if (executedExits.size() >= takeProfits.size() && !takeProfits.isEmpty()) {
            this.active = false;
            LoggerUtils.logInfo("–°–¥–µ–ª–∫–∞ " + this.id + " –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ TP –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.");
        }
    }



    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è (–µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö) TP.
     *
     * @return –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è TP.
     */
    public int getRemainingTakeProfitsCount() {
        AtomicInteger count = new AtomicInteger(0); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
        takeProfits.forEach(tp -> {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã—Ö–æ–¥ –ø–æ —ç—Ç–æ–º—É TP
            boolean executed = executedExits.stream().anyMatch(e -> Double.compare(e.getExitPrice(), tp) == 0);
            if (!executed) {
                count.incrementAndGet();
            }
        });
        int remaining = count.get();
        LoggerUtils.logInfo("–û—Å—Ç–∞–≤—à–∏–µ—Å—è TP –¥–ª—è —Å–¥–µ–ª–∫–∏ " + this.id + ": " + remaining);
        return remaining;
    }
    public boolean isPositivePNL() {
        if (positionInfo != null) {
            positivePnL = positionInfo.getUnrealizedPnl() > 0;
            return positivePnL;
        }
        return false;
    }


    @Override
    public String toString() {
        return "üü¢\\\"" + strategyName + "\uD83E\uDDE0\\\" " + symbol + "‚Äî" + direction.toString().toLowerCase() + entryType + "\n" +
                "üí∏ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ~" + entryPrice +
                "üõë SL: " + stopLoss + "\n" +
                "‚úÖ TP: " + takeProfits + "\n";
    }

    public String bigDealToString() {
        return id + "\n" + this + "QTY: " + positionSize + "\n" + "–†–∏—Å–∫: " + potentialLoss + "$\n";
    }

    public StringBuilder positiveDeal() {
        StringBuilder sb = new StringBuilder(symbol + "\n");
        sb.append(isPositivePNL()? "üõë" : "‚úÖ –ë–£");
        sb.append(positionInfo.toString());
        return sb;
    }

    public void addOrderId(OrderManager order) {
        this.ordersIdList.add(order);
    }

    public List<OrderManager> getOrdersIdList() {
        return Collections.unmodifiableList(ordersIdList);
    }

    public void clearOrdersIdList() {
        this.ordersIdList.clear();
    }
    // === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã ===

    @Getter
    public static class ExitStep {
        private final double exitPrice;
        private final double exitAmount;

        public ExitStep(double exitPrice, double exitAmount) {
            this.exitPrice = exitPrice;
            this.exitAmount = exitAmount;
        }
    }

    // equals –∏ hashCode –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Set
}