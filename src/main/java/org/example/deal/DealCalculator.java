
package org.example.deal;
import org.example.bybit.service.BybitAccountService;
import org.example.bybit.service.BybitMarketService;
import org.example.model.Direction;
import org.example.util.LoggerUtils;
import org.example.util.MathUtils;
import org.example.util.ValidationUtils;
import org.example.strategy.config.StrategyConfig; // <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢
import org.example.strategy.strategies.TradingStrategy;   // <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢

public class DealCalculator {

    private final BybitMarketService bybitMarketService;
    private final BybitAccountService accountService;


    public DealCalculator(BybitAccountService accountService, BybitMarketService bybitMarketService) {
        this.bybitMarketService = bybitMarketService;
        this.accountService = accountService;
    }

    public String calculate(Deal deal) {
        LoggerUtils.logDebug("DealCalculator calculate - –ù–∞—á–∞–ª—Å—è —Ä–∞—Å—Å—á–µ—Ç " + deal.getSymbol());
        ValidationUtils.checkNotNull(deal, "Deal cannot be null");
        StrategyConfig strategyConfig;
        try {
            TradingStrategy strategy = deal.getStrategy();
            if (strategy == null) {
                throw new IllegalStateException("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ " + deal.getId());
            }
            strategyConfig = strategy.getConfig();
            if (strategyConfig == null) {
                strategyConfig = new StrategyConfig(); // –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ null —Å–æ–∑–¥–∞—Ç—å —É–º–æ–ª—á–∞–Ω–∏–µ
            }
        } catch (Exception e) {
            LoggerUtils.logError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏ " + deal.getId(), e);
            strategyConfig = new StrategyConfig();
        }

        // 1. Stop Loss - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ strategyConfig
        double stopLoss = deal.getStopLoss() != null && deal.getStopLoss() > 0
                ? deal.getStopLoss()
                : getDefaultStopLoss(deal, strategyConfig);
        deal.setStopLoss(stopLoss);
        LoggerUtils.logInfo("SL " + deal.getSymbol() + " = " + stopLoss);


        // 2. Position size (–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ minQty –≤–Ω—É—Ç—Ä–∏)
        double actualBalance = fetchBalance();
        double positionSize = calculatePositionSize(deal, strategyConfig, bybitMarketService, actualBalance); // <-- –ü–µ—Ä–µ–¥–∞–µ–º deal, config –∏ —Å–µ—Ä–≤–∏—Å
        deal.setPositionSize(positionSize);

        // 3. Leverage - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ strategyConfig
        int leverageUsed = findValidLeverage(deal, strategyConfig, actualBalance); // <-- –ü–µ—Ä–µ–¥–∞–µ–º deal, config –∏ —Å–µ—Ä–≤–∏—Å
        deal.setLeverageUsed(leverageUsed);

        // 4. Required capital
        double requiredCapital = calculateRequiredCapital(deal);
        deal.setRequiredCapital(requiredCapital);

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if (requiredCapital > actualBalance) {
            throw new IllegalStateException("\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ: " + requiredCapital + ", –¥–æ—Å—Ç—É–ø–Ω–æ: " + actualBalance);
        }

        LoggerUtils.logDebug("DealCalculator calculate - –ó–∞–∫–æ–Ω—á–∏–ª—Å—è —Ä–∞—Å—Å—á–µ—Ç " + deal.getSymbol());
        return "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: " + MathUtils.formatPrice(0.01, positionSize) + "\n" +
                "SL: " + MathUtils.formatPrice(deal.getEntryPrice(), deal.getStopLoss()) + "\n" +
                "LV: " + leverageUsed + "x\n" +
                "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–∞–ø–∏—Ç–∞–ª: " + MathUtils.formatPrice(0.01, requiredCapital) + " USDT\n" +
                "–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞: " + MathUtils.formatPrice(0.01, actualBalance) + " USDT";
    }


    private double getDefaultStopLoss(Deal deal, StrategyConfig strategyConfig) {
        double entryPrice = deal.getEntryPrice();
        double slPercent = strategyConfig.getDefaultSlPercent(); // –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.20 ‚Üí 20%
        LoggerUtils.logDebug("getDefaultStopLoss –†–∞—Å—á—ë—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ SL:");
        double stopLoss;
        if (deal.getDirection() == Direction.LONG) {
            stopLoss = entryPrice * (1 - slPercent);
        } else {
            stopLoss = entryPrice * (1 + slPercent);
        }
        return stopLoss;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ strategyConfig
    private double calculatePositionSize(Deal deal, StrategyConfig strategyConfig, BybitMarketService bybitMarketService, double balance) {
        LoggerUtils.logDebug("calculatePositionSize üßÆ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏");

        double delta = Math.abs(deal.getEntryPrice() - deal.getStopLoss());
        if (delta == 0) {
            LoggerUtils.logInfo("‚ùå‚ùå‚ùå‚ùå‚ùå SL —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–Ω–æ–π –≤—Ö–æ–¥–∞ ‚Äî –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!‚ùå‚ùå‚ùå‚ùå‚ùå");
            throw new IllegalArgumentException("SL == entryPrice (–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!)");
        }

        double maxLossPercent = strategyConfig.getMaxLossPrecen(); // –Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0 ‚Üí 1%
        double maxLossUSD = balance * (maxLossPercent / 100.0);
        double rawPositionSize = maxLossUSD / delta;
        double potentialLoss = rawPositionSize * delta;

        // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è, –µ—Å–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        if (potentialLoss > maxLossUSD) {
            rawPositionSize = maxLossUSD / delta;
            LoggerUtils.logInfo("potentialLoss > maxLossUSD \n–ö–æ—Ä—Ä–µ–∫—Ü–∏—è rawPositionSize = " + rawPositionSize);
        }

        // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ —à–∞–≥—É –ª–æ—Ç–∞
        double minQty = bybitMarketService.getMinOrderQty(deal.getSymbol().toString());
        double roundedSize = bybitMarketService.roundLotSize(deal.getSymbol().toString(), rawPositionSize);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ minQty
        if (roundedSize < minQty) {
            LoggerUtils.logWarn("—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º = minQty –≤ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏");
            roundedSize = minQty;
        }

        LoggerUtils.logInfo("üìä –†–ê–°–ß–Å–¢ –†–ê–ó–ú–ï–†–ê –ü–û–ó–ò–¶–ò–ò (–∏—Ç–æ–≥)" +
                "\n–ú–∞–∫—Å. —Ä–∏—Å–∫: " + maxLossPercent +
                "%\n–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: " + roundedSize +
                "\n–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: " + potentialLoss + " USDT");
        // =============================================
        return roundedSize;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ strategyConfig
    private int findValidLeverage(Deal deal, StrategyConfig strategyConfig, double balance) {

        int[] leverageOptions = strategyConfig.getLeverageTrails();
        for (int leverage : leverageOptions) {
            if (isLeverageAcceptable(deal.getEntryPrice(), deal.getPositionSize(), leverage, balance)) {
                return leverage;
            }
        }
        return 3;
    }


    private boolean isLeverageAcceptable(Double entryPrice, double positionSize, int leverage, double balance) {
        double requiredCapital = (positionSize * entryPrice) / leverage;
        // –¢—Ä–µ–±—É–µ–º—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <= 50% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ª–∏–º–∏—Ç–∞)
        return requiredCapital > 0 && requiredCapital <= balance * 0.5;
    }

    private double calculateRequiredCapital(Deal deal) {
        return (deal.getPositionSize() * deal.getEntryPrice()) / deal.getLeverageUsed();
    }

    private double fetchBalance() {
        return accountService.getUsdtBalance();
    }


    public double calculateExitQty(Deal deal, int exitPercentage) {
        ValidationUtils.checkNotNull(deal, "Deal cannot be null");
        if (exitPercentage <= 0 || exitPercentage > 100) {
            throw new IllegalArgumentException("Exit percentage must be between 1 and 100. Got: " + exitPercentage);
        }

        // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º "—Å—ã—Ä–æ–π" –æ–±—ä—ë–º
        double rawQty = deal.getPositionSize() * exitPercentage / 100.0;
        LoggerUtils.logDebug("DealCalculator.calculateExitQty: rawQty = " + rawQty + " (positionSize=" + deal.getPositionSize() + ", %=" + exitPercentage + ")");

        // 2. –û–∫—Ä—É–≥–ª—è–µ–º –ø–æ —à–∞–≥—É –ª–æ—Ç–∞
        double roundedQty = bybitMarketService.roundLotSize(deal.getSymbol().toString(), rawQty);
        LoggerUtils.logDebug("DealCalculator.calculateExitQty: roundedQty = " + roundedQty);

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º minQty
        double minQty = bybitMarketService.getMinOrderQty(deal.getSymbol().toString());
        if (roundedQty < minQty) {
            LoggerUtils.logDebug("DealCalculator.calculateExitQty: roundedQty (" + roundedQty + ") < minQty (" + minQty + ") ‚Üí return 0.0");
            return 0.0;
        }

        // 4. –ó–∞—â–∏—Ç–∞: –Ω–µ –≤—ã—Ö–æ–¥–∏–º –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å
        if (roundedQty > deal.getPositionSize()) {
            LoggerUtils.logWarn("DealCalculator.calculateExitQty: exit qty (" + roundedQty + ") > position size (" + deal.getPositionSize() + ") ‚Üí return 0.0");
            return 0.0;
        }

        LoggerUtils.logDebug("DealCalculator.calculateExitQty: exit qty = " + roundedQty);
        return roundedQty;
    }
}