Отлично, давайте приведем все в порядок. Ваша цель — сделать `ButtonManager` гибким, чтобы он принимал список кнопок и автоматически формировал под них клавиатуру, а `MessageSender` умел отправлять сообщения с этой клавиатурой по запросу.

Вот как это будет выглядеть:

---

### 1. Обновленный класс `ButtonManager`
(см ButtonManager)

---

### 2. Обновленный класс `MessageSender`
(см MessageSender)


---

### 3. Что изменилось и почему

1.  **`ButtonManager` стал универсальным**: Он больше не зависит от внутреннего состояния бота (`BotTheme`). Вместо этого он принимает список `buttonLabels` и сам решает, как их красиво разместить (по 2 в строке — это можно легко изменить).
2.  **`MessageSender` теперь "умный"**: Он содержит экземпляр `ButtonManager` и предоставляет удобные методы:
    *   `send(...)` — старый метод, без кнопок.
    *   `sendWithButtons(...)` — отправляет сообщение с клавиатурой из списка кнопок.
    *   `sendAndClearButtons(...)` — отправляет сообщение и удаляет клавиатуру.
3.  **Гибкость**: Вы можете вызывать `sendWithButtons` только там, где это нужно (например, в `BotCommandHandler` при отправке меню), а в остальных случаях использовать обычный `send`.

---

### 4. Пример использования

В вашем `BotCommandHandler` или любом другом месте, где нужно отправить сообщение с кнопками:

```java
List<String> menuButtons = Arrays.asList("Показать баланс", "Открыть сделку", "Настройки");
messageSender.sendWithButtons(chatId, "Выберите действие:", menuButtons);
```

Когда нужно убрать клавиатуру после выбора:

```java
messageSender.sendAndClearButtons(chatId, "Сделка успешно открыта!");
```

Таким образом, вы полностью контролируете, где и какие кнопки показывать, а `ButtonManager` заботится только о корректном форматировании клавиатуры.