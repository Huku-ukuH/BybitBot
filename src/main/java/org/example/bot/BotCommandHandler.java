package org.example.bot;

import lombok.Getter;
import lombok.Setter;
import org.example.ai.AiService;
import org.example.bybit.BybitManager;
import org.example.deal.ActiveDealStore;
import org.example.deal.Deal;
import org.example.deal.DealCalculator;
import org.example.deal.UpdateManager;
import org.example.deal.dto.DealRequest;
import org.example.deal.dto.DealValidationResult;
import org.example.model.Direction;
import org.example.model.EntryType;
import org.example.monitor.dto.PositionInfo;
import org.example.strategy.strategies.strategies.StrategyFactory;
import org.example.util.EmojiUtils;
import org.example.util.LoggerUtils;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;


@Getter
@Setter
public class BotCommandHandler {
    private BybitManager bybitManager;
    private final ActiveDealStore activeDealStore;
    private String strategyName = "ai";
    private boolean waitingSignal = false;
    private  UpdateManager updateManager;
    private MessageSender messageSender;
    private final AiService aiService;
    private boolean justChat = false;
    private DealRequest dealRequest;
    private String currentDealId;
    private Deal deal;
    // -----------------

    public BotCommandHandler(BybitManager bybitManager, AiService aiService, ActiveDealStore activeDealStore, MessageSender messageSender, UpdateManager updateManager) {
        this.activeDealStore = activeDealStore;
        this.updateManager = updateManager;
        this.messageSender = messageSender;
        this.bybitManager = bybitManager;
        this.aiService = aiService;
    }
    public void handleCommand(long chatId, String command, String messageText) {
        if (updateManager.isCreateDealsProcess()) {
            handleUpdateDeals(chatId, messageText);
        }

        switch (command.toLowerCase()) {
            case "/start", "/help" -> sendHelpMessage(chatId);
            case "/getsgnl" -> handleGetSignal(chatId, messageText);
            case "/check" -> handleCheck(chatId);
            case "/amount" -> handleAmount(chatId);
            case "/go" -> handleGo(chatId);
            case "/list" -> handleList(chatId);
            case "/write" -> handleWrite(chatId, messageText);
            case "/orders" -> handleOrders(chatId);
            case "/calculate" -> handleCalculate(chatId);
            case "/lossupdate" -> updateLossPrecent(chatId);
            case "/exit" -> handleExit(chatId);
            case "/update" -> handleUpdateDeals(chatId, "defaultValue");
            case "/setstrat" -> handleSetStrategy(chatId, messageText);
            default -> messageSender.send(chatId, EmojiUtils.INFO + " –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + command);
        }
    }
    private void sendHelpMessage(long chatId) {
        String helpText = EmojiUtils.PAPER + """
                 –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                /getSgnl - –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                /check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ –ò–ò
                /amount - —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                /go - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–¥–µ–ª–∫—É –≤ Bybit
                /tpadd - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã—Ö–æ–¥ –ø–æ TP
                /list - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                /write - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫ —Å–¥–µ–ª–∫–µ
                /orders - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Ä–¥–µ—Ä–∞–º
                /calculate - —Ä–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                /exit - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                /update - –æ–±–Ω–æ–≤–∏—Ç—å —Å–¥–µ–ª–∫–∏ –∏–∑ Bybit
                /setstrat <strategy_name> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /setstrat fixed_risk)
                """; // <-- –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏
        messageSender.send(chatId, helpText);
    }
    private void cycleBreak(long chatId) {
        if (activeDealStore.containsDeal(deal.getId())) {
           messageSender.send(chatId, bybitManager.getBybitOrderService().closeDeal(deal));

        }
        if (currentDealId != null) {
            activeDealStore.removeDeal(currentDealId);
            LoggerUtils.logInfo("cycleBreak() " + deal + "—É–¥–∞–ª–µ–Ω–∞ –∏–∑ activeDealStore");
        }
        currentDealId = null;
        deal = null;
    }

    private void handleGetSignal(long chatId, String messageText) {
        if (!waitingSignal) {
            waitingSignal = true;
            messageSender.send(chatId, "–ñ–¥—É —Å–∏–≥–Ω–∞–ª");
            return;
        }
        messageText = messageText.replace("/getsgnl", "").trim();
        if (messageText.isEmpty()) {
            messageSender.sendWarn(chatId, "–°–∏–≥–Ω–∞–ª –ø—É—Å—Ç–æ–π. –û—Ç–º–µ–Ω–∞.", "handleGetSignal()");
            waitingSignal = false;
            return;
        }
        if (messageText.startsWith("/")) {
            messageSender.sendWarn(chatId, "–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ —Å–∏–≥–Ω–∞–ª. –û—Ç–º–µ–Ω–∞.", "handleGetSignal()");
            LoggerUtils.logWarn("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ —Å–∏–≥–Ω–∞–ª: " + messageText);
            waitingSignal = false;
            return;
        }
        try {
            deal = StrategyFactory.getStrategy(strategyName).createDeal(aiService, messageText, chatId, strategyName);
            currentDealId = deal.getId();
            messageSender.send(chatId, deal.toString());
            waitingSignal = false;
        } catch (Exception e) {

            try {
                messageSender.sendError(chatId, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞", e, "handleGetSignal()");
                deal = StrategyFactory.getStrategy(strategyName).createDeal(aiService, messageText, chatId, strategyName);
                currentDealId = deal.getId();
                messageSender.send(chatId, deal.toString());
                waitingSignal = false;
            } catch (Exception a) {
                messageSender.sendError(chatId, "–ù–µ –ø–æ–º–æ–≥–ª–æ :(", e, "handleGetSignal()");
                cycleBreak(chatId);
                waitingSignal = false;
            }
        }
    }
    private void handleCheck(long chatId) {
        if (deal == null) {
            messageSender.sendWarn(chatId, "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ—á–µ–≥–æ, Deal is null", "handleCheck()");
            cycleBreak(chatId);
            return;
        }
        try {
            DealValidationResult result = deal.getStrategy().validateDeal(deal, bybitManager.getBybitMarketService());

            if (!result.getErrors().isEmpty()) {
                messageSender.send(chatId, result.formatErrors().toString());
                cycleBreak(chatId);
                return;
            }

            if (!result.getWarnings().isEmpty()) {
                messageSender.send(chatId, result.formatWarnings().toString());
            } else {
                messageSender.send(chatId, EmojiUtils.OKAY + " –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ");
            }

        } catch (Exception e) {
            messageSender.sendError(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–¥–µ–ª–∫–∏", e, "handleCheck()");
        }
    }

    private void handleAmount(long chatId) {
        if (deal == null) {
            messageSender.sendWarn(chatId, "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ—á–µ–≥–æ, Deal is null", "handleAmount()");
            return;
        }
        try {
            messageSender.send(chatId,  EmojiUtils.OKAY + "\n" + deal.getStrategy().calculateDeal(deal, new DealCalculator(bybitManager.getBybitAccountService(), bybitManager.getBybitMarketService())));

        } catch (Exception e) {
            messageSender.sendError(chatId, "–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏", e, "handleAmount()");
        }
    }




    private void handleGo(long chatId) {
        if (deal == null) {
            messageSender.sendWarn(chatId, "–°–¥–µ–ª–∫–∏ –Ω–µ—Ç!", "handleGo()");
            return;
        }

        try {
            if (deal.getStrategy().openDeal(bybitManager.getBybitOrderService(), deal)) {
                currentDealId = deal.getId();
                activeDealStore.addDeal(deal);

                if (deal.getEntryType() == EntryType.MARKET) {
                    String result;
                    try {
                        result = deal.getStrategy().goIfDealOpen(deal, bybitManager);
                    } catch (Exception e) {
                        messageSender.sendError(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏", e, "handleGo()");
                        cycleBreak(chatId);
                        return;
                    }

                    messageSender.send(
                            chatId,
                            EmojiUtils.OKAY + " –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!\n" +
                                    deal.bigDealToString() + "\n" +
                                    result
                    );
                } else {
                    messageSender.send(chatId, "üïí –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–µ–º –≤—Ö–æ–¥...");
                }
            } else {
                messageSender.sendWarn(chatId, "‚ùå –û—Ä–¥–µ—Ä –Ω–µ –±—ã–ª —Ä–∞–∑–º–µ—â—ë–Ω.", "handleGo()");
                cycleBreak(chatId);
            }
        } catch (Exception e) {
            messageSender.sendError(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏", e, "handleGo()");
            cycleBreak(chatId);
        }
    }



    private void handleList(long chatId) {
        List<Deal> deals = activeDealStore.getAllDeals();
        if (deals.isEmpty()) {
            messageSender.sendWarn(chatId, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.", "handleList()");
            return;
        }
        StringBuilder sb = new StringBuilder("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏:\n");
        for (Deal deal : deals) {
            sb.append("- ").append(deal.getSymbol()).append(deal.getDirection() == Direction.LONG ? "L" : "S").append("\n");
        }
        messageSender.send(chatId, sb.toString());
    }

    private void handleWrite(long chatId, String messageText) {
        if (!justChat) {
            messageSender.send(chatId, "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò");
            justChat = true;
            return;
        }
        messageSender.send(chatId, "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–æ —Å–¥–µ–ª–∫–∞–º–∏");
        justChat = false;
    }

    private void handleOrders(long chatId) {
        messageSender.send(chatId, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.");
    }

    private void handleCalculate(long chatId) {
        messageSender.send(chatId, "–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.");
    }

    private void handleExit(long chatId) {
        messageSender.send(chatId, "C–¥–µ–ª–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∞.");
        cycleBreak(chatId);
    }


       // todo: –ü–†–û–î–û–õ–ñ–ê–¢–¨ –û–¢–°–Æ–î–ê
  //–º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∞ —Ç–æ—á–Ω–µ–µ –º–µ—Ç–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞,
    // –Ω–æ –ø–æ–∫–∞ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–∞—Ö
       private void handleUpdateDeals(long chatId, String strategyName) {
           messageSender.send(chatId, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –∏–∑ Bybit... –ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –ü—Ä–µ–¥–ª–∞–≥–∞—é –∑–∞–Ω—è—Ç—å—Å—è –Ω–∞–ª–∞–¥–∫–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç –≤–µ–±—Å–æ–∫–µ—Ç–∞");

           try {
               String updateResult = updateManager.updateDeals(bybitManager, activeDealStore, chatId, strategyName);

               if (updateManager.isCreateDealsProcess()) {
                   List<String> strategyButtons = Arrays.asList(StrategyFactory.getAvailableStrategies().toArray(new String[0]));
                   // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –° –ö–õ–ê–í–ò–ê–¢–£–†–û–ô
                   messageSender.sendWithButtons(chatId, updateResult, strategyButtons);
                   return;
               }

               // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –û–ß–ò–©–ê–ï–ú –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞)
               messageSender.sendAndClearButtons(chatId, updateResult);

           } catch (Exception e) {
               LoggerUtils.logError("–ù–∞–¥–æ –∂–µ, –æ—à–∏–±–∫–∞", e);
               messageSender.sendError(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", e, "handleUpdateDeals");
           }
       }


    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã --- //
    private Deal getActiveDeal(long chatId) {
        List<Deal> deals = activeDealStore.getAllDeals();
        if (deals.isEmpty()) {
            messageSender.send(chatId, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
            return null;
        }
        return deals.get(0); // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
    }

    // --- –ù–û–í–´–ô –ú–ï–¢–û–î ---
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setstrat
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–¥–µ–ª–æ–∫.
     * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /setstrat fixed_risk
     */
    private void handleSetStrategy(long chatId, String messageText) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        String[] parts = messageText.trim().split("\\s+", 2); // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –º–∞–∫—Å–∏–º—É–º –Ω–∞ 2 —á–∞—Å—Ç–∏
        if (parts.length < 2) {
            messageSender.sendWarn(chatId, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: " + Arrays.toString(StrategyFactory.getAvailableStrategies().toArray()), "handleSetStrategy()");
            return;
        }

        String strategyNameInput = parts[1].trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        if (!StrategyFactory.isStrategyAvailable(strategyNameInput)) {
            messageSender.sendWarn(chatId, "–°—Ç—Ä–∞—Ç–µ–≥–∏—è '" + strategyNameInput + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: " + Arrays.toString(StrategyFactory.getAvailableStrategies().toArray()), "handleSetStrategy()");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.strategyName = strategyNameInput.toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        messageSender.send(chatId, EmojiUtils.OKAY + " –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: " + this.strategyName);
        LoggerUtils.logInfo("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ " + this.strategyName);
    }
    // ------------------
    private  void updateLossPrecent(long chatId) {
        double updateLoss = StrategyFactory.getStrategy(strategyName).RiskUpdate(bybitManager.getBybitAccountService());
        String message = "–ü—Ä–µ–¥–µ–ª —Ä–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ " +  updateLoss + "$ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é";
        messageSender.send(chatId, message);
        LoggerUtils.logInfo(message);
    }
}
