
// PriceMonitor.java
package org.example.monitor;

import lombok.Data;
import org.example.bybit.client.BybitWebSocketClient;
import org.example.bot.MessageSender;
import org.example.deal.ActiveDealStore;
import org.example.deal.Deal;
import org.example.monitor.dto.PriceUpdate;
import org.example.strategy.params.StopLossManager;
import org.example.util.LoggerUtils;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;

@Data
public class PriceMonitor {
    private BybitWebSocketClient webSocketClient;
    private final ActiveDealStore activeDealStore;
    private final StopLossManager stopLossManager;
    private final MessageSender messageSender;
    private final Map<String, List<Deal>> symbolSubscribers = new ConcurrentHashMap<>();

    public PriceMonitor(ActiveDealStore activeDealStore,
                        MessageSender messageSender, StopLossManager stopLossManager) {
        this.activeDealStore = activeDealStore;
        this.messageSender = messageSender;
        this.stopLossManager = stopLossManager;
    }


    public void subscribe(Deal deal) {
        String symbol = deal.getSymbol().getSymbol();
        symbolSubscribers
                .computeIfAbsent(symbol, k -> new CopyOnWriteArrayList<>())
                .add(deal);
        webSocketClient.subscribeToTicker(deal.getSymbol());
    }

    public void handlePriceUpdate(PriceUpdate update) {
        LoggerUtils.info("üìà –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: " + update.getSymbol() + " = " + update.getPrice());
        onPriceUpdate(update.getSymbol(), update.getPrice());
    }




    // –†–∞–±–æ—Ç–∞—Ç—å –¥–∞–ª—å—à–µ —Å —ç—Ç–∏–º –º–µ—Ç–æ–¥–æ–º, –æ–Ω –¥–æ–ª–∂–µ–Ω —É –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏ –≤—ã–∑—ã–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –∞ —É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–µ—Ç–æ–¥ onPriceUpdate.
    // –°—Ç–æ–ø –ª–æ—Å—Å —Å–∞–º –ø–æ —Å–µ–±–µ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –Ω–µ –¥–æ–ª–∂–µ–Ω, –∏–Ω–∞—á–µ —ç—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥, –≤—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π,
    // –ø–æ–∫–∞ —á—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç- —Å—Ç–∞–≤–∏—Ç—å —Å—Ç–æ–ø –Ω–∞(–ø–æ–¥ —Ç–≤—Ö –≤ –∑–æ–Ω—É –±–µ–∑—É–±—ã—Ç–∫–∞) –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–π–∫–∞
    public void onPriceUpdate(String symbol, double currentPrice) {
        List<Deal> deals = symbolSubscribers.get(symbol);
        if (deals == null || deals.isEmpty()) {
            LoggerUtils.debug("üîç –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è: " + symbol);
            return;
        }

        LoggerUtils.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ " + deals.size() + " —Å–¥–µ–ª–æ–∫ –ø–æ " + symbol + " –ø—Ä–∏ —Ü–µ–Ω–µ " + currentPrice);

        synchronized (deals) {
            for (Deal deal : deals) {
                if (!deal.isActive()) {
                    LoggerUtils.debug("‚è≠Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞: " + deal.getSymbol());
                    continue;
                }

                boolean slUpdated = stopLossManager.moveStopLoss(deal, currentPrice);
                if (slUpdated) {
                    String message = String.format("‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è %s: %.2f", symbol, deal.getStopLoss());
                    messageSender.send(deal.getChatId(), message);
                    LoggerUtils.info(message);
                }
            }
        }
    }

    public void startMonitoringAllDeals() {
        List<Deal> deals = activeDealStore.getAllDeals();
        for (Deal deal : deals) {
            subscribe(deal);
        }
    }
}
