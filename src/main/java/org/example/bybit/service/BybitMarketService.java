package org.example.bybit.service;

import org.example.bybit.dto.InstrumentInfoResponse;
import org.example.bybit.dto.TickerResponse;
import org.example.bybit.client.BybitHttpClient;
import org.example.util.LoggerUtils;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BybitMarketService {
    private final BybitHttpClient httpClient;
    private String accountCategorySpot = "spot";
    private String accountCategoryLinear = "linear";
    private final Map<String, InstrumentInfoResponse.Instrument> instrumentInfoCache = new HashMap<>();

    public BybitMarketService(BybitHttpClient httpClient) {
        this.httpClient = httpClient;
    }

    public double getLastPrice(String symbol) {
        String endpoint = "/v5/market/tickers";
        Map<String, String> params = Map.of(
                "category", accountCategoryLinear,
                "symbol", symbol
        );

        TickerResponse response = httpClient.get(endpoint, params, TickerResponse.class);
        List<TickerResponse.Ticker> tickers = response.getResult().getList();

        LoggerUtils.logDebug("–æ—Ç–≤–µ—Ç getLastPrice –¥–ª—è " + symbol + ": " + tickers); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ logDebug
        if (tickers == null || tickers.isEmpty()) {
            throw new RuntimeException("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞: " + symbol);
        }

        try {
            return Double.parseDouble(tickers.get(0).getLastPrice());
        } catch (NumberFormatException e) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É: " + tickers.get(0).getLastPrice(), e);
        }
    }

    public double getMinOrderQty(String symbol) {
        InstrumentInfoResponse.Instrument instrumentInfo = getInstrumentInfoFromCacheOrApi(symbol);
        double minOrderQty = instrumentInfo.getLotSizeFilter().getMinOrderQty();
        LoggerUtils.logDebug("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ " + symbol + " –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –∫—ç—à–∞. MinOrderQty =" + minOrderQty);
        if (minOrderQty <= 0) {
            throw new IllegalStateException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π minOrderQty –¥–ª—è " + symbol + ": " + minOrderQty);
        }
        LoggerUtils.logDebug("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ (" + symbol + "): " + minOrderQty);
        return minOrderQty;
    }

    //  –ò–∑–≤–ª–µ–∫–∞–µ—Ç —à–∞–≥ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏—è
    public double getLotSizeStep(String symbol) {
        InstrumentInfoResponse.Instrument instrumentInfo = getInstrumentInfoFromCacheOrApi(symbol);
        double qtyStep = instrumentInfo.getLotSizeFilter().getQtyStep();
        LoggerUtils.logDebug("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ " + symbol + " –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –∫—ç—à–∞. qtyStep =" + qtyStep);
        if (qtyStep <= 0) {
            throw new IllegalStateException("–ù–µ–≤–µ—Ä–Ω—ã–π qtyStep –¥–ª—è —Å–∏–º–≤–æ–ª–∞: " + symbol + " (qtyStep=" + qtyStep + ")");
        }
        return qtyStep;
    }

    // –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç quantity —á—Ç–æ–±—ã –æ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –ø—Ä–∞–≤–∏–ª–∞–º minOrderQty –∏ qtyStep
    public double roundLotSize(String symbol, double quantity) {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (Double.isNaN(quantity) || Double.isInfinite(quantity) || quantity < 0) {
            throw new IllegalArgumentException("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è: " + quantity);
        }

        InstrumentInfoResponse.Instrument instrumentInfo = getInstrumentInfoFromCacheOrApi(symbol);

        double stepSize = instrumentInfo.getLotSizeFilter().getQtyStep();
        double minQty = instrumentInfo.getLotSizeFilter().getMinOrderQty();
        LoggerUtils.logDebug("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ stepSize –∏ minQty –¥–ª—è" + symbol + " –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –∫—ç—à–∞.\n stepSize =" + stepSize + "\nminQty =" + minQty);


        if (stepSize <= 0 || minQty <= 0) {
            throw new IllegalStateException("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã qtyStep –∏–ª–∏ minQty –¥–ª—è " + symbol +
                    " (qtyStep=" + stepSize + ", minQty=" + minQty + ")");
        }

        if (quantity < minQty) {
            LoggerUtils.logDebug("üîÅ –í—Ö–æ–¥–Ω–æ–µ –∫–æ–ª-–≤–æ " + quantity + " –º–µ–Ω—å—à–µ minQty " + minQty + " ‚Äî –∑–∞–º–µ–Ω–∞ –Ω–∞ minQty.");
            return formatQuantity(minQty);
        }

        BigDecimal step = BigDecimal.valueOf(stepSize);
        BigDecimal qty = BigDecimal.valueOf(quantity);
        BigDecimal rounded = qty.divide(step, 0, RoundingMode.DOWN).multiply(step);
        double result = rounded.doubleValue();

        if (result < minQty) {
            LoggerUtils.logWarn("‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∫–æ–ª-–≤–æ " + result + " –æ–∫–∞–∑–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ minQty " + minQty +
                    " –¥–ª—è —Å–∏–º–≤–æ–ª–∞ " + symbol + ". –í–æ–∑–≤—Ä–∞—â–∞–µ–º minQty.");
            result = minQty;
        }

        return formatQuantity(result);
    }


    private InstrumentInfoResponse.Instrument getInstrumentInfoFromCacheOrApi(String symbol) {

        InstrumentInfoResponse.Instrument cachedInfo = instrumentInfoCache.get(symbol);
        if (cachedInfo != null) {
            return cachedInfo;
        }

        LoggerUtils.logDebug("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ " + symbol + " –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ. –ó–∞–ø—Ä–æ—Å –∫ API Bybit.");
        String endpoint = "/v5/market/instruments-info";
        Map<String, String> params = Map.of(
                "category", accountCategoryLinear,
                "symbol", symbol
        );

        InstrumentInfoResponse response = httpClient.get(endpoint, params, InstrumentInfoResponse.class);
        List<InstrumentInfoResponse.Instrument> list = response.getResult().getList();
        if (list == null || list.isEmpty()) {
            throw new RuntimeException("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Å–∏–º–≤–æ–ª–∞: " + symbol);
        }

        InstrumentInfoResponse.Instrument instrumentInfo = list.get(0);

        // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        instrumentInfoCache.put(symbol, instrumentInfo);
        LoggerUtils.logDebug("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ " + symbol + " —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à.");

        return instrumentInfo;
    }
    // -----------------------------------

    private static double formatQuantity(double value) {
        BigDecimal bd = new BigDecimal(Double.toString(value));
        bd = bd.stripTrailingZeros();
        String formatted = bd.toPlainString();
        return Double.parseDouble(formatted);
    }
}