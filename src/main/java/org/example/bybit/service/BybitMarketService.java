package org.example.bybit.service;
import org.example.bybit.dto.InstrumentInfoResponse;
import org.example.bybit.dto.TickerResponse;
import org.example.bybit.client.BybitHttpClient;
import org.example.util.LoggerUtils;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;
import java.util.Map;


public class BybitMarketService {
    private final BybitHttpClient httpClient;
    private String accountCategorySpot = "spot";
    private String accountCategoryLinear = "linear";


    public BybitMarketService(BybitHttpClient httpClient) {
        this.httpClient = httpClient;
    }


    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º —Ä—ã–Ω–∫–µ Bybit (category = linear).
     *
     * @param symbol —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: "BTCUSDT")
     * @return –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (lastPrice)
     */
    public double getLastPrice(String symbol) {
        String endpoint = "/v5/market/tickers";
        Map<String, String> params = Map.of(
                "category", accountCategoryLinear, // —Ñ—å—é—á–µ—Ä—Å—ã (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ accountCategoryLinear, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                "symbol", symbol
        );

        TickerResponse response = httpClient.get(endpoint, params, TickerResponse.class);
        List<TickerResponse.Ticker> tickers = response.getResult().getList();

        LoggerUtils.logInfo("–æ—Ç–≤–µ—Ç getLastPrice: " + tickers);
        if (tickers == null || tickers.isEmpty()) {
            throw new RuntimeException("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞: " + symbol);
        }

        try {
            return Double.parseDouble(tickers.get(0).getLastPrice());
        } catch (NumberFormatException e) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É: " + tickers.get(0).getLastPrice(), e);
        }
    }

    public double getMinOrderQty(String symbol) {
        String endpoint = "/v5/market/instruments-info";
        Map<String, String> params = Map.of(
                "category", accountCategoryLinear,
                "symbol", symbol
        );

        InstrumentInfoResponse response = httpClient.get(endpoint, params, InstrumentInfoResponse.class);
        List<InstrumentInfoResponse.Instrument> list = response.getResult().getList();
        if (list == null || list.isEmpty()) {
            throw new RuntimeException("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Å–∏–º–≤–æ–ª–∞: " + symbol);
        }

        double minOrderQty = list.get(0).getLotSizeFilter().getMinOrderQty();
        if (minOrderQty <= 0) {
            throw new IllegalStateException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π minOrderQty: " + minOrderQty);
        }

        return minOrderQty;
    }


    // —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–∏–∫ —Å–∞–π–∑–∞
    public double getLotSizeStep(String symbol) {
        String endpoint = "/v5/market/instruments-info";
        Map<String, String> params = Map.of(
                "category", accountCategoryLinear,
                "symbol", symbol
        );

        InstrumentInfoResponse response = httpClient.get(endpoint, params, InstrumentInfoResponse.class);
        List<InstrumentInfoResponse.Instrument> list = response.getResult().getList();
        if (list == null || list.isEmpty()) {
            throw new RuntimeException("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Å–∏–º–≤–æ–ª–∞: " + symbol);
        }

        double qtyStep = list.get(0).getLotSizeFilter().getQtyStep();
        if (qtyStep <= 0) {
            throw new IllegalStateException("–ù–µ–≤–µ—Ä–Ω—ã–π qtyStep –¥–ª—è —Å–∏–º–≤–æ–ª–∞: " + symbol + " (qtyStep=" + qtyStep + ")");
        }

        return qtyStep;
    }


    public double roundLotSize(String symbol, double quantity) {
        String endpoint = "/v5/market/instruments-info";
        Map<String, String> params = Map.of(
                "category", accountCategoryLinear,
                "symbol", symbol
        );

        InstrumentInfoResponse response = httpClient.get(endpoint, params, InstrumentInfoResponse.class);
        List<InstrumentInfoResponse.Instrument> list = response.getResult().getList();
        if (list == null || list.isEmpty()) {
            throw new RuntimeException("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è " + symbol);
        }

        double stepSize = list.get(0).getLotSizeFilter().getQtyStep();
        double minQty = list.get(0).getLotSizeFilter().getMinOrderQty();

        if (stepSize <= 0 || minQty <= 0) {
            throw new IllegalStateException("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã qtyStep –∏–ª–∏ minQty –¥–ª—è " + symbol +
                    " (qtyStep=" + stepSize + ", minQty=" + minQty + ")");
        }

        BigDecimal step = BigDecimal.valueOf(stepSize);
        BigDecimal qty = BigDecimal.valueOf(quantity);

        // –û–∫—Ä—É–≥–ª—è–µ–º –í–ù–ò–ó –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ stepSize
        BigDecimal rounded = qty.divide(step, 0, RoundingMode.DOWN).multiply(step);
        double result = rounded.doubleValue();

        // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (result < minQty) {
            LoggerUtils.logInfo("üîÅ –ö–æ–ª-–≤–æ " + result + " –º–µ–Ω—å—à–µ minQty " + minQty + " ‚Äî –∑–∞–º–µ–Ω–∞ –Ω–∞ minQty.");
            result = minQty;
        }

        return formatQuantity(result);
    }

    private static double formatQuantity(double value) {
        BigDecimal bd = new BigDecimal(Double.toString(value));
        bd = bd.stripTrailingZeros();
        String formatted = bd.toPlainString();
        return Double.parseDouble(formatted);
    }
}