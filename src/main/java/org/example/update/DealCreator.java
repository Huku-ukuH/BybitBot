package org.example.update;

import org.example.bybit.BybitManager;
import org.example.bybit.service.BybitPositionTrackerService;
import org.example.deal.ActiveDealStore;
import org.example.deal.Deal;
import org.example.deal.DealCalculator;
import org.example.model.Symbol;
import org.example.monitor.dto.PositionInfo;
import org.example.strategy.strategies.strategies.superStrategy.AbstractStrategy;
import org.example.strategy.strategies.strategies.StrategyFactory;
import org.example.util.LoggerUtils;

import java.util.List;

public class DealCreator {

    private final DealCalculator dealCalculator;
    public DealCreator(DealCalculator dealCalculator) {
        this.dealCalculator = dealCalculator;
    }

    public CreationResult dealCreationTypeSorter (
            String strategyName,
            ActiveDealStore store,
            long chatId,
            BybitManager bybitManager,
            List<PositionInfo> pendingPositions,
            List<BybitPositionTrackerService.OrderInfo> pendingOrdersForDealCreation,
            int currentIndex, OrderRestorer orderRestorer) {

        if (pendingOrdersForDealCreation.isEmpty()) {
            return createNextDeal(strategyName, store, chatId, bybitManager, pendingPositions, currentIndex, orderRestorer);
        }
        return createNextDealByLimitOrder(strategyName, store, chatId, pendingOrdersForDealCreation, currentIndex);
    }

    public CreationResult createNextDeal(
            String strategyName,
            ActiveDealStore store,
            long chatId,
            BybitManager bybitManager,
            List<PositionInfo> pendingPositions,
            int currentIndex, OrderRestorer orderRestorer) {

        if (currentIndex >= pendingPositions.size()) {
            return new CreationResult(false, "‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.");
        }

        PositionInfo pos = pendingPositions.get(currentIndex);
        currentIndex++;

        if (!StrategyFactory.isStrategyAvailable(strategyName)) {
            return new CreationResult(true, "‚ö†Ô∏è Strategy '" + strategyName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: " +
                    String.join(", ", StrategyFactory.getAvailableStrategies()));
        }

        try {
            AbstractStrategy strategy = StrategyFactory.getStrategy(strategyName);
            Deal deal = strategy.createDealByUpdate(pos, chatId, strategyName);
            deal.setId(pos.getSymbol() + "_" + strategyName + "_" + System.currentTimeMillis());

            StringBuilder msg = new StringBuilder(orderRestorer.restoreOrders(deal, bybitManager));


            // –ï—Å–ª–∏ TP/SL –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            if (deal.getTakeProfits().isEmpty()) {
                strategy.setTP(deal, bybitManager);
            }

            //
            Double currentSL = deal.getStopLoss();
            if (currentSL == null || currentSL <= 0.0) {
                double newSL = dealCalculator.getStopLossForUpdatePosition(deal, strategy.getConfig());
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ —Ä–∞—Å—á—ë—Ç –¥–∞–ª 0 ‚Äî –Ω–µ —Å—Ç–∞–≤–∏–º
                if (newSL <= 0) {
                    LoggerUtils.warn("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π SL <= 0 –¥–ª—è " + deal.getSymbol() + ". –ü—Ä–æ–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.");
                } else {
                    deal.setStopLoss(newSL);
                    msg.append(strategy.setSL(deal, bybitManager));
                }
            }

            store.addDeal(deal);
            msg.append("‚úÖ Deal –¥–ª—è ").append(pos.getSymbol()).append(" –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π '").append(strategyName).append("'.\n");

            if (currentIndex < pendingPositions.size()) {
                PositionInfo next = pendingPositions.get(currentIndex);
                msg.append("\nüÜï –°–ª–µ–¥: ").append(next.getSymbol()).append(". –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:");
                return new CreationResult(true, msg.toString(), currentIndex);
            } else {
                return new CreationResult(false, msg.append("\n‚úÖ –í—Å–µ Deals –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!").toString());
            }

        } catch (Exception e) {
            LoggerUtils.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Deal –¥–ª—è " + pos.getSymbol(), e);
            return new CreationResult(true, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }


    public CreationResult createNextDealByLimitOrder(
            String strategyName,
            ActiveDealStore store,
            long chatId,
            List<BybitPositionTrackerService.OrderInfo> pendingOrdersForDealCreation,
            int currentIndex) {

        if (currentIndex >= pendingOrdersForDealCreation.size()) {
            return new CreationResult(false, "‚ùå –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫.");
        }

        BybitPositionTrackerService.OrderInfo orderInfo = pendingOrdersForDealCreation.get(currentIndex);

        Symbol symbol = orderInfo.getSymbol();

        // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–¥–µ–ª–∫–∞ –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
        if (!store.getDealsBySymbol(symbol).isEmpty()) {
            StringBuilder msg = new StringBuilder();
            msg.append("‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –¥–ª—è ").append(symbol).append(" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.\n");

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ—Ä–¥–µ—Ä—É
            if (currentIndex + 1 < pendingOrdersForDealCreation.size()) {
                BybitPositionTrackerService.OrderInfo next = pendingOrdersForDealCreation.get(currentIndex + 1);
                msg.append("\nüÜï –°–ª–µ–¥: ").append(next.getSymbol()).append(". –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:");
                return new CreationResult(true, msg.toString(), currentIndex + 1);
            } else {
                return new CreationResult(false, msg.append("\n‚úÖ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.").toString());
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if (!StrategyFactory.isStrategyAvailable(strategyName)) {
            return new CreationResult(true, "‚ö†Ô∏è Strategy '" + strategyName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: " +
                    String.join(", ", StrategyFactory.getAvailableStrategies()));
        }

        try {
            AbstractStrategy strategy = StrategyFactory.getStrategy(strategyName);
            Deal deal = strategy.createDealByUpdate(orderInfo, chatId, strategyName);
            deal.setId(symbol + "_" + strategyName + "_" + System.currentTimeMillis());

            store.addDeal(deal);

            StringBuilder msg = new StringBuilder();
            msg.append("‚úÖ Deal –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ").append(symbol).append(" —Å–æ–∑–¥–∞–Ω–∞ —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π '").append(strategyName).append("'.\n");

            if (currentIndex + 1 < pendingOrdersForDealCreation.size()) {
                BybitPositionTrackerService.OrderInfo nextOrderInfo = pendingOrdersForDealCreation.get(currentIndex + 1);
                msg.append("\nüÜï –°–ª–µ–¥: ").append(nextOrderInfo.getSymbol()).append(". –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:");
                return new CreationResult(true, msg.toString(), currentIndex + 1);
            } else {
                return new CreationResult(false, msg.append("\n‚úÖ –í—Å–µ Deals –ø–æ –æ—Ä–¥–µ—Ä–∞–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!").toString());
            }

        } catch (Exception e) {
            LoggerUtils.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Deal –ø–æ –æ—Ä–¥–µ—Ä—É –¥–ª—è " + symbol, e);
            return new CreationResult(true, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

}