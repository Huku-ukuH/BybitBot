package org.example.update;

import lombok.Getter;
import org.example.bybit.BybitManager;
import org.example.bybit.service.BybitPositionTrackerService;
import org.example.deal.utils.ActiveDealStore;
import org.example.deal.utils.DealCalculator;
import org.example.monitor.dto.PositionInfo;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class UpdateManager {

    private final DealUpdater dealUpdater;
    private final UpdateDealCreator updateDealCreator;
    private final BybitManager bybitManager;
    private final OrderRestorer orderRestorer;

    @Getter
    private boolean createDealsProcess = false;
    private List<BybitPositionTrackerService.OrderInfo> pendingOrdersForDealCreation = new ArrayList<>();
    private List<PositionInfo> pendingNewPositions = new ArrayList<>();
    private int currentRestoreIndex = 0;

    public UpdateManager(BybitManager bybitManager, DealCalculator dealCalculator) {
        this.updateDealCreator = new UpdateDealCreator(dealCalculator);
        this.orderRestorer = new OrderRestorer();
        this.dealUpdater = new DealUpdater(orderRestorer);
        this.bybitManager = bybitManager;
    }

    public String updateDeals(ActiveDealStore store, long chatId, String strategyNameInput) throws IOException {
        if (createDealsProcess) {
            return handleDealCreation(strategyNameInput, store, chatId);
        }

        List<PositionInfo> bybitPositionsList = bybitManager.getBybitPositionTrackerService().getPositionList();
        List<BybitPositionTrackerService.OrderInfo> limitOrders = orderRestorer.getUsdtLimitOrders(bybitManager);

        // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ‚Üí —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º–∏
        if (!bybitPositionsList.isEmpty()) {
            UpdateResult result = dealUpdater.updateExistingDeals(store, bybitPositionsList, bybitManager);
            StringBuilder sb = new StringBuilder("üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n").append(result.log());

            if (!result.newPositions().isEmpty()) {
                startCreationDealProcess(result.newPositions());
                sb.append("\nüÜï –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ")
                        .append(pendingNewPositions.get(0).getSymbol())
                        .append(". –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:");
                return sb.toString();
            }

            // –ù–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç ‚Üí –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            if (!limitOrders.isEmpty()) {
                startCreationDealProcessFromOrders(limitOrders);
                sb.append("\n‚úÖ –í—Å–µ —Å–¥–µ–ª–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.\n")
                        .append("üÜï –ù–∞–π–¥–µ–Ω—ã –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞. –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è: ")
                        .append(limitOrders.get(0).getSymbol());
                return sb.toString();
            }

            sb.append("\n‚úÖ –í—Å–µ —Å–¥–µ–ª–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –õ–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç.");
            return sb.toString();
        }

        // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π ‚Üí —Ä–∞–±–æ—Ç–∞–µ–º —Å –ª–∏–º–∏—Ç–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏
        if (!limitOrders.isEmpty()) {
            startCreationDealProcessFromOrders(limitOrders);
            return "üÜï –ù–∞–π–¥–µ–Ω—ã –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞. –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è: " + limitOrders.get(0).getSymbol();
        }

        // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ù–∏—á–µ–≥–æ –Ω–µ—Ç
        return "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Bybit.";
    }
    public PositionInfo updateOneDeal(String symbol) {
        return bybitManager.getBybitPositionTrackerService().getPositionBySymbol(symbol);
    }
    private String handleDealCreation(String strategyName, ActiveDealStore activeDealStore, long chatId) {
        CreationResult result = updateDealCreator.dealCreationTypeSorter(
                strategyName, activeDealStore, chatId, bybitManager, pendingNewPositions, pendingOrdersForDealCreation, currentRestoreIndex, orderRestorer);
        currentRestoreIndex = result.nextIndex();
        createDealsProcess = result.stillCreating();
        return result.message();
    }

    private void startCreationDealProcessFromOrders(List<BybitPositionTrackerService.OrderInfo> orders) {
        this.pendingNewPositions.clear();
        this.pendingOrdersForDealCreation = new ArrayList<>(orders);
        this.currentRestoreIndex = 0;
        this.createDealsProcess = true;
    }

    private void startCreationDealProcess(List<PositionInfo> newPositions) {
        this.pendingOrdersForDealCreation.clear();
        this.pendingNewPositions = new ArrayList<>(newPositions);
        this.currentRestoreIndex = 0;
        this.createDealsProcess = true;
    }
}