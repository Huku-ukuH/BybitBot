package org.example.strategy.params;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.example.model.Direction;
import org.example.util.LoggerUtils;
import org.example.util.MathUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Getter
public class ExitPlan {
    public enum ExitType {
        TP,
        PNL,
        TRAILING // –ø–æ —Ç—Ä–µ–π–ª–∏–Ω–≥—É
    }

    private final List<ExitStep> steps;
    private final ExitType type;

    public ExitPlan(List<ExitStep> steps, ExitType type) {
        this.steps = new ArrayList<>(steps);
        this.type = type;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞–Ω –≤—ã—Ö–æ–¥–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º TP.
     */
    public static ExitPlan fromTp(List<Double> takeProfits, Map<Integer, int[]> rules) {
        if (takeProfits == null || takeProfits.isEmpty()) {
            return null;
        }

        int count = takeProfits.size();
        int[] distribution = rules.get(count);
        if (distribution == null || distribution.length != count) {
            return null;
        }

        List<ExitStep> steps = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            steps.add(new ExitStep(takeProfits.get(i), distribution[i]));
        }

        return new ExitPlan(steps, ExitType.TP);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞–Ω –≤—ã—Ö–æ–¥–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º PnL.
     * PnL-—É—Ä–æ–≤–Ω–∏ ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø—Ä–∏–±—ã–ª–∏, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏.
     */
    public static ExitPlan fromPnl(Map<Double, Integer> pnlRules, double entryPrice, Direction direction)  {
        LoggerUtils.logInfo("üìä ExitPlan.fromPnl(): –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ PnL");
        LoggerUtils.logInfo("  ‚û§ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: " + entryPrice +
                "\n‚û§ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: \" + direction)" +
                "\n‚û§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ PnL-—É—Ä–æ–≤–Ω–µ–π: " + pnlRules.size());

        List<ExitStep> steps = new ArrayList<>();

        for (Map.Entry<Double, Integer> entry : pnlRules.entrySet()) {
            double pnlPercent = entry.getKey();
            int percentage = entry.getValue();
            double targetPrice;

            if (direction == Direction.LONG) {
                targetPrice = entryPrice * (1 + pnlPercent / 100.0);                              //–≤–æ–∑–º–æ–∂–Ω–æ–µ –º–µ—Å—Ç–æ –æ—à–∏–±–æ–∫
                LoggerUtils.logInfo("  ‚û§ " + pnlPercent + "% ‚Üí —Ü–µ–Ω–∞ = " + entryPrice + " * (1 + " + (pnlPercent / 100.0) + ") = " + MathUtils.formatPrice(entryPrice, targetPrice));
            } else {
                targetPrice = entryPrice * (1 - pnlPercent / 100.0);                              //–≤–æ–∑–º–æ–∂–Ω–æ–µ –º–µ—Å—Ç–æ –æ—à–∏–±–æ–∫
                LoggerUtils.logInfo("  ‚û§ " + pnlPercent + "% ‚Üí —Ü–µ–Ω–∞ = " + entryPrice + " * (1 - " + (pnlPercent / 100.0) + ") = " + MathUtils.formatPrice(entryPrice, targetPrice));
            }

            // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–Ω—ã
            if (targetPrice <= 0) {
                LoggerUtils.logWarn("‚ùå‚ùå‚ùå‚ùå‚ùå fromPnl(): –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ <= 0: " + targetPrice + " (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å)‚ùå‚ùå‚ùå‚ùå‚ùå");
                continue;
            }

            steps.add(new ExitStep(targetPrice, percentage));
        }

        if (steps.isEmpty()) {
            LoggerUtils.logWarn("‚ö†Ô∏è ExitPlan.fromPnl(): –í—Å–µ —É—Ä–æ–≤–Ω–∏ –±—ã–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null");
            return null;
        }

        LoggerUtils.logInfo("‚úÖ ExitPlan.fromPnl(): –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω —Å " + steps.size() + " —à–∞–≥–∞–º–∏");
        return new ExitPlan(steps, ExitType.PNL);
    }
    @Getter
    @Setter
    @NoArgsConstructor
    @AllArgsConstructor

    public static class ExitStep {
        private double takeProfit;
        private int percentage;

        @Override
        public String toString() {
            return "ExitStep{" +
                    "takeProfit=" + takeProfit +
                    ", percentage=" + percentage +
                    '}';
        }
    }

}