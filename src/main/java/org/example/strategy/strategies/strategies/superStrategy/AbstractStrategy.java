package org.example.strategy.strategies.strategies.superStrategy;

import lombok.Getter;
import org.example.bybit.BybitManager;
import org.example.bybit.dto.BybitOrderRequest;
import org.example.bybit.dto.BybitOrderResponse;
import org.example.bybit.service.BybitAccountService;
import org.example.bybit.service.BybitMarketService;
import org.example.bybit.service.BybitOrderService;
import org.example.deal.Deal;
import org.example.deal.utils.DealCalculator;
import org.example.deal.utils.DealValidator;
import org.example.strategy.strategies.strategies.TradingStrategy;
import org.example.update.UpdateManager;
import org.example.deal.dto.DealValidationResult;
import org.example.monitor.dto.PriceUpdate;
import org.example.strategy.params.ExitPlan;
import org.example.model.Direction;
import org.example.strategy.config.StrategyConfig;
import org.example.strategy.params.ExitPlanManager;
import org.example.strategy.params.StopLossManager;
import org.example.util.LoggerUtils;
import org.example.strategy.params.PartialExitPlanner;
import org.example.util.ValuesUtil;
import java.util.*;

/**
 * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –æ–±—â—É—é –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–æ–π.
 * –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AiStrategy, MartingaleStrategy) –¥–æ–ª–∂–Ω—ã –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
 * –∏ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã.
 */
public abstract class AbstractStrategy implements TradingStrategy {

    protected StrategyConfig config;
    @Getter
    private final StrategyDealCreator strategyDealCreator;
    @Getter
    private final OnePriceUpdateController onePriceUpdateController;
    public AbstractStrategy() {
        this.config = createConfig();
        this.strategyDealCreator = new StrategyDealCreator();
        this.onePriceUpdateController = new OnePriceUpdateController();
        LoggerUtils.debug(getClass().getSimpleName() + ": –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º: " + config);
    }
    protected StrategyConfig createConfig() {
        return new StrategyConfig();
    }

    public DealValidationResult validateDeal(Deal deal, BybitMarketService marketService) { return new DealValidator().validate(deal, marketService); }
    public String calculateDeal (Deal deal, DealCalculator dealCalculator) {
        return dealCalculator.calculate(deal);
    }



    public boolean openPosition(BybitOrderService bybitOrderService, Deal deal) {
        // –≠—Ç–∞–ø 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞
        try {
            bybitOrderService.setLeverage(deal);
        } catch (Exception e) {
            throw new RuntimeException("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ " + deal.getSymbol(), e);
        }

        // –≠—Ç–∞–ø 2: –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
        try {
            BybitOrderRequest request = BybitOrderRequest.forEntry(deal);
            BybitOrderResponse orderResponse = bybitOrderService.placeOrder(request);

            // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Bybit, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å—ë –æ–∫
            String retMsg = orderResponse.getRetMsg();
            String fullMessage = retMsg != null ? retMsg : "No message from Bybit";

            if (orderResponse.isSuccess()) {
                deal.setId(orderResponse.getOrderResult().getOrderId());

                return true;
            } else {
                LoggerUtils.warn("–û—Ä–¥–µ—Ä –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω –¥–ª—è " + deal.getSymbol() + ": " + fullMessage);
                return false;
            }
        } catch (Exception e) {
            // –õ–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ retMsg –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            throw new RuntimeException("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ " + deal.getSymbol(), e);
        }
    }

    public String positionHasBeenOpened(Deal deal, BybitManager bybitManager) {
        deal.setActive(true);
        return setSL(deal, bybitManager) + "\n" + setTP(deal, bybitManager);
    }

    public String setSL(Deal deal, BybitManager bybitManager){
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
        String result = "";
        try {

            double currentPrice = bybitManager.getBybitMarketService().getLastPrice(deal.getSymbol().toString());
            Direction dir = deal.getDirection();


            LoggerUtils.info("!!!!!!!!!!!!!!!!SetSL mrthod. Dral SL = " + deal.getStopLoss() + "CMP = " + currentPrice);


            boolean isInvalidSL = (dir == Direction.SHORT && currentPrice >= deal.getStopLoss()) ||
                    (dir == Direction.LONG  && currentPrice <= deal.getStopLoss());
            if (isInvalidSL) {
                return "‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å SL (" + deal.getStopLoss() + ") —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π (" + currentPrice + ").";
            }

            BybitOrderResponse slResponse = bybitManager.getBybitOrderService().setStopLoss(deal);
            String retMsg = slResponse.getRetMsg();

            if (!slResponse.isSuccess()) {
                result = retMsg != null ? retMsg : "No error message from Bybit";
                throw new IllegalStateException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL: " + result);
            }

            result = "‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è " + deal.getSymbol() + ": " + deal.getStopLoss();
            LoggerUtils.info(result);
        } catch (Exception e) {
            throw new RuntimeException("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ SL –¥–ª—è —Å–∏–º–≤–æ–ª–∞ " + deal.getSymbol() + "—Ä–µ–∑—É–ª—å—Ç–∞—Ç :" + result, e);
        }
        return result;
    }


    public String setTP(Deal deal, BybitManager bybitManager) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP —á–µ—Ä–µ–∑ ExitPlan
        try {
            ExitPlan plan = deal.getStrategy().planExit(deal);

            if (plan == null || plan.getSteps().isEmpty()) {
                return "‚ö†Ô∏è –ü–ª–∞–Ω –≤—ã—Ö–æ–¥–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.";
            }

            ExitPlanManager exitPlanManager = new ExitPlanManager(
                    new DealCalculator(bybitManager.getBybitAccountService(), bybitManager.getBybitMarketService()),
                    bybitManager.getBybitOrderService()
            );

            return exitPlanManager.executeExitPlan(deal, plan);
        } catch (Exception e) {
            LoggerUtils.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ TP –¥–ª—è —Å–∏–º–≤–æ–ª–∞ " + deal.getSymbol(), e);
            throw new RuntimeException("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ TP –¥–ª—è —Å–∏–º–≤–æ–ª–∞ " + deal.getSymbol(), e);
        }
    }


    public ExitPlan planExit(Deal deal) {
        try {
            LoggerUtils.info("üîç " + getClass().getSimpleName() + ": –ù–∞—á–∞–ª–æ —Å–¥–µ–ª–∫–∏ " + deal.getId());

            StrategyConfig config = this.getConfig();
            double entryPrice = deal.getEntryPrice();
            Direction direction = deal.getDirection();

            // 1. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ TP
            if (deal.getTakeProfits() != null && !deal.getTakeProfits().isEmpty()) {
                List<ExitPlan.ExitStep> steps = new PartialExitPlanner()
                        .planExit(deal.getTakeProfits(), config.getTpExitRules());
                if (!steps.isEmpty()) {
                    return new ExitPlan(steps, ExitPlan.ExitType.TP);
                }
            }

            // 2. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ PnL
            Map<Double, Integer> pnlRules = config.getPnlTpExitRules();
            if (pnlRules != null && !pnlRules.isEmpty()) {
                LoggerUtils.info("üìà PnL-–ø—Ä–∞–≤–∏–ª–∞: " + pnlRules);
                LoggerUtils.info("‚û§ –í—ã–∑—ã–≤–∞—é ExitPlan.fromPnl() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ PnL");

                // üî• –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç NoSuchMethodError
                ExitPlan plan = ExitPlan.fromPnl(pnlRules, entryPrice, direction);

                if (plan != null && !plan.getSteps().isEmpty()) {
                    LoggerUtils.info("‚úÖ –ü–ª–∞–Ω –ø–æ PnL —Å–æ–∑–¥–∞–Ω");
                    return plan;
                }
            }

            LoggerUtils.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –≤—ã—Ö–æ–¥–∞");
            return null;

        } catch (Error err) {
            // ‚úÖ –õ–æ–≤–∏–º NoSuchMethodError
            LoggerUtils.error("üî¥ FATAL: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω)", err);
            return null;
        } catch (Exception e) {
            LoggerUtils.error("–û—à–∏–±–∫–∞ –≤ planExit()", e);
            e.printStackTrace();
            return null;
        }
    }


    public double RiskUpdate(BybitAccountService bybitAccountService) {
        double updateLoss = bybitAccountService.getUsdtBalance() / 100 * ValuesUtil.getDefaultLossPrecent();
        this.config = new StrategyConfig(
                null,
                updateLoss,
                new int[]{5, 10, 20},
                15.0,
                null,
                null
        );
        return updateLoss;
    }


    @Override
    public StrategyConfig getConfig() {
        return config;
    }


    @Override
    public void onPriceUpdate(Deal deal, PriceUpdate priceUpdate, UpdateManager updateManager, StopLossManager stopLossManager, BybitManager bybitManager) {
        onePriceUpdateController.handlePriceUpdate(deal, priceUpdate, updateManager, stopLossManager,bybitManager);
    }
    @Override
    public void onTakeProfitHit(Deal deal, double executedPrice) {
        LoggerUtils.info(getClass().getSimpleName() + ": –°—Ä–∞–±–æ—Ç–∞–ª TP –Ω–∞ —É—Ä–æ–≤–Ω–µ " + executedPrice + ".");
    }
    @Override
    public void onStopLossHit(Deal deal) {
        LoggerUtils.warn(getClass().getSimpleName() + ": –°—Ä–∞–±–æ—Ç–∞–ª SL.");
    }



}