
package org.example.strategy.strategies;

import org.example.bybit.dto.TickerResponse;
import org.example.bybit.service.BybitAccountService;
import org.example.deal.Deal;
import org.example.strategy.params.ExitPlan;
import org.example.model.Direction;
import org.example.strategy.config.StrategyConfig;
import org.example.strategy.dto.StrategyContext;
import org.example.util.EmojiUtils;
import org.example.util.LoggerUtils;
import org.example.strategy.params.PartialExitPlanner;
import org.example.util.ValuesUtil;

import java.util.*;

/**
 * –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–æ–π.
 */
public class BasedStrategy implements TradingStrategy {
    private StrategyConfig config;

    public BasedStrategy() {
        this.config = createConfig();
    }
    protected StrategyConfig createConfig() {
        return new StrategyConfig(
                null,
                null,
                new int[]{10, 20, 5},
                null,
                null,
                null
        );
    }

    private final Set<Double> triggeredPnlLevels = new HashSet<>();

    @Override
    public StrategyConfig getConfig() {
        return this.config;
    }

    @Override
    public ExitPlan planExit(Deal deal) {
        try {
            LoggerUtils.logInfo("üîç BasedStrategy.planExit(): –ù–∞—á–∞–ª–æ –¥–ª—è —Å–¥–µ–ª–∫–∏ " + deal.getId());

            StrategyConfig config = this.getConfig();
            double entryPrice = deal.getEntryPrice();
            Direction direction = deal.getDirection();

            // 1. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ TP
            if (deal.getTakeProfits() != null && !deal.getTakeProfits().isEmpty()) {
                List<ExitPlan.ExitStep> steps = new PartialExitPlanner()
                        .planExit(deal.getTakeProfits(), config.getTpExitRules());
                if (!steps.isEmpty()) {
                    return new ExitPlan(steps, ExitPlan.ExitType.TP);
                }
            }

            // 2. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ PnL
            Map<Double, Integer> pnlRules = config.getPnlTpExitRules();
            if (pnlRules != null && !pnlRules.isEmpty()) {
                LoggerUtils.logInfo("üìà PnL-–ø—Ä–∞–≤–∏–ª–∞: " + pnlRules);
                LoggerUtils.logInfo("‚û§ –í—ã–∑—ã–≤–∞—é ExitPlan.fromPnl() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ PnL");

                // üî• –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç NoSuchMethodError
                ExitPlan plan = ExitPlan.fromPnl(pnlRules, entryPrice, direction);

                if (plan != null && !plan.getSteps().isEmpty()) {
                    LoggerUtils.logInfo("‚úÖ –ü–ª–∞–Ω –ø–æ PnL —Å–æ–∑–¥–∞–Ω");
                    return plan;
                }
            }

            LoggerUtils.logWarn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –≤—ã—Ö–æ–¥–∞");
            return null;

        } catch (Error err) {
            // ‚úÖ –õ–æ–≤–∏–º NoSuchMethodError
            LoggerUtils.logError("üî¥ FATAL: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω)", err);
            return null;
        } catch (Exception e) {
            LoggerUtils.logError("–û—à–∏–±–∫–∞ –≤ planExit()", e);
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public void onPriceUpdate(StrategyContext context, TickerResponse price) {
        Deal deal = context.getActiveDeal();
        if (deal == null || !deal.isActive()) {
            return;
        }
        if (price.getResult() == null || price.getResult().getList() == null || price.getResult().getList().isEmpty()) {
            LoggerUtils.logWarn("onPriceUpdate: –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π TickerResponse –¥–ª—è —Å–¥–µ–ª–∫–∏ " + deal.getId());
            return;
        }

        String dealSymbol = deal.getSymbol().toString();

        Double currentPrice = null;
        for (TickerResponse.Ticker ticker : price.getResult().getList()) {
            if (dealSymbol.equals(ticker.getSymbol())) {
                try {
                    currentPrice = Double.parseDouble(ticker.getLastPrice());
                    break;
                } catch (NumberFormatException e) {
                    LoggerUtils.logError("onPriceUpdate: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã –¥–ª—è " + ticker.getSymbol(), e);
                }
            }
        }

        if (currentPrice == null) {
            LoggerUtils.logWarn("onPriceUpdate: –¶–µ–Ω–∞ –¥–ª—è " + dealSymbol + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        double entryPrice = deal.getEntryPrice();
        Direction direction = deal.getDirection();

        if (entryPrice <= 0) {
            LoggerUtils.logWarn("onPriceUpdate: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ " + deal.getId());
            return;
        }

        double pnlPercent;
        if (direction == Direction.LONG) {
            pnlPercent = ((currentPrice - entryPrice) / entryPrice) * 100.0 * deal.getLeverageUsed();
        } else {
            pnlPercent = ((entryPrice - currentPrice) / entryPrice) * 100.0 * deal.getLeverageUsed();
        }

        LoggerUtils.logDebug("BasedStrategy (" + deal.getId() + "): PnL = " + String.format("%.2f", pnlPercent) + "%");

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ PnL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        Map<Double, Integer> pnlRules = config.getPnlTpExitRules();
        if (pnlRules.isEmpty()) {
            LoggerUtils.logDebug("BasedStrategy: –ù–µ—Ç –ø—Ä–∞–≤–∏–ª –≤—ã—Ö–æ–¥–∞ –ø–æ PnL –≤ –∫–æ–Ω—Ñ–∏–≥–µ.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –ª–∏ —É—Ä–æ–≤–Ω–∏ PnL
        for (Map.Entry<Double, Integer> ruleEntry : pnlRules.entrySet()) {
            double targetPnlLevel = ruleEntry.getKey() * deal.getLeverageUsed();
            double exitPercentage = ruleEntry.getValue() * deal.getLeverageUsed();

            boolean levelReached = (direction == Direction.LONG && pnlPercent >= targetPnlLevel) ||
                    (direction == Direction.SHORT && pnlPercent >= targetPnlLevel);

            if (levelReached && !triggeredPnlLevels.contains(targetPnlLevel)) {
                deal.addTakeProfit(currentPrice);
                triggeredPnlLevels.add(targetPnlLevel);
                LoggerUtils.logInfo("BasedStrategy: –î–æ—Å—Ç–∏–≥–Ω—É—Ç PnL " + String.format("%.2f", targetPnlLevel) +
                        "%. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TP. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤—ã—Ö–æ–¥ " + exitPercentage + "% –ø–æ–∑–∏—Ü–∏–∏.");



                // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è TP-–æ—Ä–¥–µ—Ä–∞ —Å exitPercentage
                // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ BybitOrderService.placeTakeProfitOrder —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º qty
            }
        }
    }

    @Override
    public void onTakeProfitHit(StrategyContext context, double executedPrice) {
        LoggerUtils.logInfo("BasedStrategy: –°—Ä–∞–±–æ—Ç–∞–ª TP –Ω–∞ —É—Ä–æ–≤–Ω–µ " + executedPrice + ".");
        // –°–±—Ä–æ—Å —Ç—Ä–∏–≥–≥–µ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ç–æ—Ç –∂–µ —É—Ä–æ–≤–µ–Ω—å (–æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ)
        // triggeredPnlLevels.removeIf(level -> Math.abs(level - ...) < epsilon);
    }

    @Override
    public void onStopLossHit(StrategyContext context) {
        LoggerUtils.logWarn("BasedStrategy: –°—Ä–∞–±–æ—Ç–∞–ª SL.");
        // –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏
        triggeredPnlLevels.clear();
    }
    @Override
    public double lossUpdate(BybitAccountService bybitAccountService) {
        double updateLoss = bybitAccountService.getUsdtBalance()/100 * ValuesUtil.getDefaultLossPrecent();
        config = new StrategyConfig(null, updateLoss, new int[]{5, 10, 20}, 15.0, null, null
        );
        return updateLoss;
    }
}