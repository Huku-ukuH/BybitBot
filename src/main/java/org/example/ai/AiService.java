package org.example.ai;

import chat.giga.client.GigaChatClient;
import chat.giga.client.auth.AuthClient;
import chat.giga.client.auth.AuthClientBuilder;
import chat.giga.model.ModelName;
import chat.giga.model.Scope;
import chat.giga.model.completion.ChatMessage;
import chat.giga.model.completion.ChatMessageRole;
import chat.giga.model.completion.CompletionRequest;
import chat.giga.model.completion.CompletionResponse;
import io.github.cdimascio.dotenv.Dotenv;
import org.checkerframework.checker.units.qual.A;
import org.example.deal.dto.DealRequest;
import org.example.util.JsonUtils;
import org.example.util.LoggerUtils;
import org.example.util.ValidationUtils;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

public class AiService {

    public AiService() {}

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ GigaChat –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
     */
    private String sendPostRequest(String promptText) {
        try {

            GigaChatClient client = GigaChatClient.builder()
                    .authClient(AuthClient.builder()
                            .withOAuth(AuthClientBuilder.OAuthBuilder.builder()
                                    .scope(Scope.GIGACHAT_API_PERS)
                                    .clientId(Dotenv.load().get("CLIENT_ID"))
                                    .clientSecret(Dotenv.load().get("CLIENT_SECRET"))
                                    .build())
                            .build())
                    .build();
            CompletionResponse response = client.completions(
                    CompletionRequest.builder()
                            .model(ModelName.GIGA_CHAT)
                            .message(ChatMessage.builder()
                                    .content(promptText)
                                    .role(ChatMessageRole.USER)
                                    .build())
                            .build()
            );

            if (response.choices() != null && !response.choices().isEmpty()) {
                String AiResponse = response.choices().get(0).message().content();
                LoggerUtils.logInfo("–æ—Ç–≤–µ—Ç –Ω–π—Ä–æ–Ω–∫–∏ " + AiResponse);
                return AiResponse;
            } else {
                LoggerUtils.logInfo("‚ùå‚ùå‚ùå‚ùå‚ùå AI: –û—Ç–≤–µ—Ç –ò–ò –ø—É—Å—Ç–æ–π (choices –ø—É—Å—Ç)‚ùå‚ùå‚ùå‚ùå‚ùå");
                throw new RuntimeException("AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
            }
        } catch (Exception e) {
            LoggerUtils.logError("üö® AI: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò", e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: " + e.getMessage(), e);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Ä–µ—Å—É—Ä—Å–æ–≤.
     */
    private String loadPrompt(String fileName) {
        String resourcePath = "prompts/" + fileName;

        try (InputStream is = getClass().getClassLoader().getResourceAsStream(resourcePath)) {
            if (is == null) {
                throw new IllegalArgumentException("‚ùå‚ùå‚ùå‚ùå‚ùå –§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: " + resourcePath + "‚ùå‚ùå‚ùå‚ùå‚ùå");
            }
            return new String(is.readAllBytes(), StandardCharsets.UTF_8);
        } catch (IOException e) {
            throw new RuntimeException("‚ùå‚ùå‚ùå‚ùå‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: " + resourcePath  + "‚ùå‚ùå‚ùå‚ùå‚ùå", e);
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç —Å–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ò–ò –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DealRequest.
     */
    public DealRequest parseSignal(String signalText) {
        ValidationUtils.checkNotNull(signalText, "Signal text cannot be null");

        try {
            String promptTemplate = loadPrompt("get_signal_prompt.txt");
            String fullPrompt = promptTemplate + "\n\n### –°–ò–ì–ù–ê–õ\n" + signalText.trim();

            String responseJson = sendPostRequest(fullPrompt);

            return JsonUtils.fromJson(responseJson, DealRequest.class);
        } catch (Exception e) {
            LoggerUtils.logError("‚ùå AI: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–∏–≥–Ω–∞–ª–∞", e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –ò–ò: " + e.getMessage(), e);
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç —Å –ò–ò (–±–µ–∑ –ø—Ä–æ–º–ø—Ç–∞).
     */
    public String justChat(String messageText) {
        try {
            String response = sendPostRequest(messageText);
            LoggerUtils.logDebug("ü§ñ –ò–ò: " + response);
            return response;
        } catch (Exception e) {
            LoggerUtils.logError("‚ùå AI: –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞", e);
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò.";
        }
    }
}